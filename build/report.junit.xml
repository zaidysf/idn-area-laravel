<?xml version="1.0" encoding="UTF-8"?>
<testsuites>
  <testsuite name="/Users/zaid/codes/idn-area-laravel-12/phpunit.xml.dist" tests="173" assertions="425" errors="0" failures="0" skipped="0" time="2.805994">
    <testsuite name="zaidysf/IdnArea Test Suite" tests="173" assertions="425" errors="0" failures="0" skipped="0" time="2.805994">
      <testsuite name="Tests\ArchTest" file="tests/ArchTest.php" tests="7" assertions="18" errors="0" failures="0" skipped="0" time="0.814881">
        <testcase name="it will not use debugging functions" file="tests/ArchTest.php::it will not use debugging functions" class="Tests\ArchTest" classname="Tests.ArchTest" assertions="5" time="0.610831"/>
        <testcase name="models extend Illuminate\Database\Eloquent\Model" file="tests/ArchTest.php::models extend Illuminate\Database\Eloquent\Model" class="Tests\ArchTest" classname="Tests.ArchTest" assertions="1" time="0.046917"/>
        <testcase name="models are in Models namespace" file="tests/ArchTest.php::models are in Models namespace" class="Tests\ArchTest" classname="Tests.ArchTest" assertions="1" time="0.006464"/>
        <testcase name="services are in Services namespace" file="tests/ArchTest.php::services are in Services namespace" class="Tests\ArchTest" classname="Tests.ArchTest" assertions="1" time="0.052645"/>
        <testcase name="commands extend Illuminate\Console\Command" file="tests/ArchTest.php::commands extend Illuminate\Console\Command" class="Tests\ArchTest" classname="Tests.ArchTest" assertions="1" time="0.056053"/>
        <testcase name="facades extend Illuminate\Support\Facades\Facade" file="tests/ArchTest.php::facades extend Illuminate\Support\Facades\Facade" class="Tests\ArchTest" classname="Tests.ArchTest" assertions="1" time="0.006191"/>
        <testcase name="ensure no Laravel helpers are used in models" file="tests/ArchTest.php::ensure no Laravel helpers are used in models" class="Tests\ArchTest" classname="Tests.ArchTest" assertions="8" time="0.035780"/>
      </testsuite>
      <testsuite name="Tests\Architecture\GeneralTest" file="tests/Architecture/GeneralTest.php" tests="11" assertions="11" errors="0" failures="0" skipped="0" time="0.289128">
        <testcase name="it will not use debugging functions" file="tests/Architecture/GeneralTest.php::it will not use debugging functions" class="Tests\Architecture\GeneralTest" classname="Tests.Architecture.GeneralTest" assertions="1" time="0.074032"/>
        <testcase name="models should extend Eloquent" file="tests/Architecture/GeneralTest.php::models should extend Eloquent" class="Tests\Architecture\GeneralTest" classname="Tests.Architecture.GeneralTest" assertions="1" time="0.009881"/>
        <testcase name="commands should extend Command" file="tests/Architecture/GeneralTest.php::commands should extend Command" class="Tests\Architecture\GeneralTest" classname="Tests.Architecture.GeneralTest" assertions="1" time="0.008825"/>
        <testcase name="facades should extend Facade" file="tests/Architecture/GeneralTest.php::facades should extend Facade" class="Tests\Architecture\GeneralTest" classname="Tests.Architecture.GeneralTest" assertions="1" time="0.005092"/>
        <testcase name="service provider should extend PackageServiceProvider" file="tests/Architecture/GeneralTest.php::service provider should extend PackageServiceProvider" class="Tests\Architecture\GeneralTest" classname="Tests.Architecture.GeneralTest" assertions="1" time="0.007732"/>
        <testcase name="models should use factories" file="tests/Architecture/GeneralTest.php::models should use factories" class="Tests\Architecture\GeneralTest" classname="Tests.Architecture.GeneralTest" assertions="1" time="0.010444"/>
        <testcase name="it does not use env outside of config" file="tests/Architecture/GeneralTest.php::it does not use env outside of config" class="Tests\Architecture\GeneralTest" classname="Tests.Architecture.GeneralTest" assertions="1" time="0.005334"/>
        <testcase name="controllers should not have die or exit" file="tests/Architecture/GeneralTest.php::controllers should not have die or exit" class="Tests\Architecture\GeneralTest" classname="Tests.Architecture.GeneralTest" assertions="1" time="0.005533"/>
        <testcase name="it will not use compact() function" file="tests/Architecture/GeneralTest.php::it will not use compact() function" class="Tests\Architecture\GeneralTest" classname="Tests.Architecture.GeneralTest" assertions="1" time="0.005297"/>
        <testcase name="ensure no use of globals" file="tests/Architecture/GeneralTest.php::ensure no use of globals" class="Tests\Architecture\GeneralTest" classname="Tests.Architecture.GeneralTest" assertions="1" time="0.008551"/>
        <testcase name="classes should be final or abstract" file="tests/Architecture/GeneralTest.php::classes should be final or abstract" class="Tests\Architecture\GeneralTest" classname="Tests.Architecture.GeneralTest" assertions="1" time="0.148407"/>
      </testsuite>
      <testsuite name="Tests\CommandTest" file="tests/CommandTest.php" tests="4" assertions="6" errors="0" failures="0" skipped="0" time="0.464450">
        <testcase name="`IdnAreaCommand` → it can instantiate command" file="tests/CommandTest.php::`IdnAreaCommand` → it can instantiate command" class="Tests\CommandTest" classname="Tests.CommandTest" assertions="1" time="0.042567"/>
        <testcase name="`IdnAreaCommand` → it has correct signature and description" file="tests/CommandTest.php::`IdnAreaCommand` → it has correct signature and description" class="Tests\CommandTest" classname="Tests.CommandTest" assertions="3" time="0.007476"/>
        <testcase name="`IdnAreaCommand` → it command is registered" file="tests/CommandTest.php::`IdnAreaCommand` → it command is registered" class="Tests\CommandTest" classname="Tests.CommandTest" assertions="1" time="0.063617"/>
        <testcase name="`IdnAreaCommand` → it can run command without force option" file="tests/CommandTest.php::`IdnAreaCommand` → it can run command without force option" class="Tests\CommandTest" classname="Tests.CommandTest" assertions="1" time="0.350790"/>
      </testsuite>
      <testsuite name="Tests\ExampleTest" file="tests/ExampleTest.php" tests="3" assertions="10" errors="0" failures="0" skipped="0" time="0.017675">
        <testcase name="it package is properly configured" file="tests/ExampleTest.php::it package is properly configured" class="Tests\ExampleTest" classname="Tests.ExampleTest" assertions="2" time="0.009029"/>
        <testcase name="it config is published correctly" file="tests/ExampleTest.php::it config is published correctly" class="Tests\ExampleTest" classname="Tests.ExampleTest" assertions="4" time="0.004555"/>
        <testcase name="it database tables exist" file="tests/ExampleTest.php::it database tables exist" class="Tests\ExampleTest" classname="Tests.ExampleTest" assertions="4" time="0.004090"/>
      </testsuite>
      <testsuite name="Tests\FacadeTest" file="tests/FacadeTest.php" tests="7" assertions="19" errors="0" failures="0" skipped="0" time="0.058831">
        <testcase name="`IdnArea Facade` → it can get provinces via facade" file="tests/FacadeTest.php::`IdnArea Facade` → it can get provinces via facade" class="Tests\FacadeTest" classname="Tests.FacadeTest" assertions="2" time="0.010369"/>
        <testcase name="`IdnArea Facade` → it can get specific province via facade" file="tests/FacadeTest.php::`IdnArea Facade` → it can get specific province via facade" class="Tests\FacadeTest" classname="Tests.FacadeTest" assertions="2" time="0.005581"/>
        <testcase name="`IdnArea Facade` → it can get regencies by province via facade" file="tests/FacadeTest.php::`IdnArea Facade` → it can get regencies by province via facade" class="Tests\FacadeTest" classname="Tests.FacadeTest" assertions="2" time="0.006601"/>
        <testcase name="`IdnArea Facade` → it can search areas via facade" file="tests/FacadeTest.php::`IdnArea Facade` → it can search areas via facade" class="Tests\FacadeTest" classname="Tests.FacadeTest" assertions="3" time="0.007514"/>
        <testcase name="`IdnArea Facade` → it can get area statistics via facade" file="tests/FacadeTest.php::`IdnArea Facade` → it can get area statistics via facade" class="Tests\FacadeTest" classname="Tests.FacadeTest" assertions="2" time="0.009030"/>
        <testcase name="`IdnArea Facade` → it returns null for non-existent areas" file="tests/FacadeTest.php::`IdnArea Facade` → it returns null for non-existent areas" class="Tests\FacadeTest" classname="Tests.FacadeTest" assertions="4" time="0.006810"/>
        <testcase name="`IdnArea Facade` → it returns empty collections for non-existent parent areas" file="tests/FacadeTest.php::`IdnArea Facade` → it returns empty collections for non-existent parent areas" class="Tests\FacadeTest" classname="Tests.FacadeTest" assertions="4" time="0.012927"/>
      </testsuite>
      <testsuite name="Tests\FactoryTest" file="tests/FactoryTest.php" tests="12" assertions="44" errors="0" failures="0" skipped="0" time="0.120060">
        <testcase name="`Model Factories` → it can create province using factory" file="tests/FactoryTest.php::`Model Factories` → it can create province using factory" class="Tests\FactoryTest" classname="Tests.FactoryTest" assertions="4" time="0.039675"/>
        <testcase name="`Model Factories` → it can create province with specific states" file="tests/FactoryTest.php::`Model Factories` → it can create province with specific states" class="Tests\FactoryTest" classname="Tests.FactoryTest" assertions="4" time="0.005007"/>
        <testcase name="`Model Factories` → it can create regency using factory" file="tests/FactoryTest.php::`Model Factories` → it can create regency using factory" class="Tests\FactoryTest" classname="Tests.FactoryTest" assertions="5" time="0.005217"/>
        <testcase name="`Model Factories` → it can create regency for specific province" file="tests/FactoryTest.php::`Model Factories` → it can create regency for specific province" class="Tests\FactoryTest" classname="Tests.FactoryTest" assertions="2" time="0.006996"/>
        <testcase name="`Model Factories` → it can create regency with specific types" file="tests/FactoryTest.php::`Model Factories` → it can create regency with specific types" class="Tests\FactoryTest" classname="Tests.FactoryTest" assertions="2" time="0.013765"/>
        <testcase name="`Model Factories` → it can create district using factory" file="tests/FactoryTest.php::`Model Factories` → it can create district using factory" class="Tests\FactoryTest" classname="Tests.FactoryTest" assertions="5" time="0.008023"/>
        <testcase name="`Model Factories` → it can create district for specific regency" file="tests/FactoryTest.php::`Model Factories` → it can create district for specific regency" class="Tests\FactoryTest" classname="Tests.FactoryTest" assertions="2" time="0.006637"/>
        <testcase name="`Model Factories` → it can create village using factory" file="tests/FactoryTest.php::`Model Factories` → it can create village using factory" class="Tests\FactoryTest" classname="Tests.FactoryTest" assertions="5" time="0.005240"/>
        <testcase name="`Model Factories` → it can create village for specific district" file="tests/FactoryTest.php::`Model Factories` → it can create village for specific district" class="Tests\FactoryTest" classname="Tests.FactoryTest" assertions="2" time="0.009561"/>
        <testcase name="`Model Factories` → it can create complete hierarchy using factories" file="tests/FactoryTest.php::`Model Factories` → it can create complete hierarchy using factories" class="Tests\FactoryTest" classname="Tests.FactoryTest" assertions="7" time="0.009253"/>
        <testcase name="`Model Factories` → it can create multiple models using factories" file="tests/FactoryTest.php::`Model Factories` → it can create multiple models using factories" class="Tests\FactoryTest" classname="Tests.FactoryTest" assertions="2" time="0.005398"/>
        <testcase name="`Model Factories` → it can make models without persisting to database" file="tests/FactoryTest.php::`Model Factories` → it can make models without persisting to database" class="Tests\FactoryTest" classname="Tests.FactoryTest" assertions="4" time="0.005289"/>
      </testsuite>
      <testsuite name="Tests\Feature\SetupCommandTest" file="tests/Feature/SetupCommandTest.php" tests="7" assertions="10" errors="0" failures="0" skipped="0" time="0.159408">
        <testcase name="it can run setup command interactively" file="tests/Feature/SetupCommandTest.php::it can run setup command interactively" class="Tests\Feature\SetupCommandTest" classname="Tests.Feature.SetupCommandTest" assertions="3" time="0.053799"/>
        <testcase name="it can run setup command with local mode parameter" file="tests/Feature/SetupCommandTest.php::it can run setup command with local mode parameter" class="Tests\Feature\SetupCommandTest" classname="Tests.Feature.SetupCommandTest" assertions="1" time="0.021655"/>
        <testcase name="it can run setup command with api mode parameter" file="tests/Feature/SetupCommandTest.php::it can run setup command with api mode parameter" class="Tests\Feature\SetupCommandTest" classname="Tests.Feature.SetupCommandTest" assertions="1" time="0.013461"/>
        <testcase name="it validates invalid mode parameter" file="tests/Feature/SetupCommandTest.php::it validates invalid mode parameter" class="Tests\Feature\SetupCommandTest" classname="Tests.Feature.SetupCommandTest" assertions="1" time="0.017259"/>
        <testcase name="it skips setup when already configured without force" file="tests/Feature/SetupCommandTest.php::it skips setup when already configured without force" class="Tests\Feature\SetupCommandTest" classname="Tests.Feature.SetupCommandTest" assertions="2" time="0.009172"/>
        <testcase name="it can force reconfigure when already setup" file="tests/Feature/SetupCommandTest.php::it can force reconfigure when already setup" class="Tests\Feature\SetupCommandTest" classname="Tests.Feature.SetupCommandTest" assertions="1" time="0.021792"/>
        <testcase name="it handles non-interactive mode correctly" file="tests/Feature/SetupCommandTest.php::it handles non-interactive mode correctly" class="Tests\Feature\SetupCommandTest" classname="Tests.Feature.SetupCommandTest" assertions="1" time="0.022271"/>
      </testsuite>
      <testsuite name="Tests\Feature\SwitchModeCommandTest" file="tests/Feature/SwitchModeCommandTest.php" tests="10" assertions="14" errors="0" failures="0" skipped="0" time="0.072350">
        <testcase name="it can switch to api mode" file="tests/Feature/SwitchModeCommandTest.php::it can switch to api mode" class="Tests\Feature\SwitchModeCommandTest" classname="Tests.Feature.SwitchModeCommandTest" assertions="1" time="0.011666"/>
        <testcase name="it can switch to local mode" file="tests/Feature/SwitchModeCommandTest.php::it can switch to local mode" class="Tests\Feature\SwitchModeCommandTest" classname="Tests.Feature.SwitchModeCommandTest" assertions="1" time="0.006703"/>
        <testcase name="it validates invalid mode parameter" file="tests/Feature/SwitchModeCommandTest.php::it validates invalid mode parameter" class="Tests\Feature\SwitchModeCommandTest" classname="Tests.Feature.SwitchModeCommandTest" assertions="1" time="0.006396"/>
        <testcase name="it shows current mode when already in target mode" file="tests/Feature/SwitchModeCommandTest.php::it shows current mode when already in target mode" class="Tests\Feature\SwitchModeCommandTest" classname="Tests.Feature.SwitchModeCommandTest" assertions="2" time="0.006662"/>
        <testcase name="it can skip validation checks" file="tests/Feature/SwitchModeCommandTest.php::it can skip validation checks" class="Tests\Feature\SwitchModeCommandTest" classname="Tests.Feature.SwitchModeCommandTest" assertions="1" time="0.007160"/>
        <testcase name="it can skip migration step" file="tests/Feature/SwitchModeCommandTest.php::it can skip migration step" class="Tests\Feature\SwitchModeCommandTest" classname="Tests.Feature.SwitchModeCommandTest" assertions="1" time="0.005683"/>
        <testcase name="it can skip seeding step" file="tests/Feature/SwitchModeCommandTest.php::it can skip seeding step" class="Tests\Feature\SwitchModeCommandTest" classname="Tests.Feature.SwitchModeCommandTest" assertions="1" time="0.005887"/>
        <testcase name="it handles interactive mode selection" file="tests/Feature/SwitchModeCommandTest.php::it handles interactive mode selection" class="Tests\Feature\SwitchModeCommandTest" classname="Tests.Feature.SwitchModeCommandTest" assertions="4" time="0.008936"/>
        <testcase name="it validates prerequisites for api mode" file="tests/Feature/SwitchModeCommandTest.php::it validates prerequisites for api mode" class="Tests\Feature\SwitchModeCommandTest" classname="Tests.Feature.SwitchModeCommandTest" assertions="1" time="0.007153"/>
        <testcase name="it validates prerequisites for local mode" file="tests/Feature/SwitchModeCommandTest.php::it validates prerequisites for local mode" class="Tests\Feature\SwitchModeCommandTest" classname="Tests.Feature.SwitchModeCommandTest" assertions="1" time="0.006104"/>
      </testsuite>
      <testsuite name="Tests\IdnAreaTest" file="tests/IdnAreaTest.php" tests="12" assertions="44" errors="0" failures="0" skipped="0" time="0.087976">
        <testcase name="it can instantiate the main class" file="tests/IdnAreaTest.php::it can instantiate the main class" class="Tests\IdnAreaTest" classname="Tests.IdnAreaTest" assertions="1" time="0.008125"/>
        <testcase name="it can get empty provinces collection" file="tests/IdnAreaTest.php::it can get empty provinces collection" class="Tests\IdnAreaTest" classname="Tests.IdnAreaTest" assertions="2" time="0.008655"/>
        <testcase name="it can search areas with empty results" file="tests/IdnAreaTest.php::it can search areas with empty results" class="Tests\IdnAreaTest" classname="Tests.IdnAreaTest" assertions="5" time="0.010758"/>
        <testcase name="it can get statistics with zero counts" file="tests/IdnAreaTest.php::it can get statistics with zero counts" class="Tests\IdnAreaTest" classname="Tests.IdnAreaTest" assertions="7" time="0.006029"/>
        <testcase name="it province model has correct configuration" file="tests/IdnAreaTest.php::it province model has correct configuration" class="Tests\IdnAreaTest" classname="Tests.IdnAreaTest" assertions="4" time="0.004839"/>
        <testcase name="it regency model has correct configuration" file="tests/IdnAreaTest.php::it regency model has correct configuration" class="Tests\IdnAreaTest" classname="Tests.IdnAreaTest" assertions="4" time="0.004537"/>
        <testcase name="it district model has correct configuration" file="tests/IdnAreaTest.php::it district model has correct configuration" class="Tests\IdnAreaTest" classname="Tests.IdnAreaTest" assertions="4" time="0.004322"/>
        <testcase name="it village model has correct configuration" file="tests/IdnAreaTest.php::it village model has correct configuration" class="Tests\IdnAreaTest" classname="Tests.IdnAreaTest" assertions="4" time="0.005045"/>
        <testcase name="it can use facade" file="tests/IdnAreaTest.php::it can use facade" class="Tests\IdnAreaTest" classname="Tests.IdnAreaTest" assertions="1" time="0.017153"/>
        <testcase name="it can create and retrieve province" file="tests/IdnAreaTest.php::it can create and retrieve province" class="Tests\IdnAreaTest" classname="Tests.IdnAreaTest" assertions="5" time="0.006615"/>
        <testcase name="it can create regency with province relationship" file="tests/IdnAreaTest.php::it can create regency with province relationship" class="Tests\IdnAreaTest" classname="Tests.IdnAreaTest" assertions="4" time="0.005513"/>
        <testcase name="it can test search with sample data" file="tests/IdnAreaTest.php::it can test search with sample data" class="Tests\IdnAreaTest" classname="Tests.IdnAreaTest" assertions="3" time="0.006382"/>
      </testsuite>
      <testsuite name="Tests\RelationshipTest" file="tests/RelationshipTest.php" tests="8" assertions="16" errors="0" failures="0" skipped="0" time="0.048987">
        <testcase name="`Model Relationships` → it province has many regencies" file="tests/RelationshipTest.php::`Model Relationships` → it province has many regencies" class="Tests\RelationshipTest" classname="Tests.RelationshipTest" assertions="2" time="0.009428"/>
        <testcase name="`Model Relationships` → it province has many districts through regencies" file="tests/RelationshipTest.php::`Model Relationships` → it province has many districts through regencies" class="Tests\RelationshipTest" classname="Tests.RelationshipTest" assertions="2" time="0.006406"/>
        <testcase name="`Model Relationships` → it regency belongs to province" file="tests/RelationshipTest.php::`Model Relationships` → it regency belongs to province" class="Tests\RelationshipTest" classname="Tests.RelationshipTest" assertions="2" time="0.006598"/>
        <testcase name="`Model Relationships` → it regency has many districts" file="tests/RelationshipTest.php::`Model Relationships` → it regency has many districts" class="Tests\RelationshipTest" classname="Tests.RelationshipTest" assertions="2" time="0.005450"/>
        <testcase name="`Model Relationships` → it district belongs to regency" file="tests/RelationshipTest.php::`Model Relationships` → it district belongs to regency" class="Tests\RelationshipTest" classname="Tests.RelationshipTest" assertions="2" time="0.004746"/>
        <testcase name="`Model Relationships` → it district has many villages" file="tests/RelationshipTest.php::`Model Relationships` → it district has many villages" class="Tests\RelationshipTest" classname="Tests.RelationshipTest" assertions="2" time="0.005106"/>
        <testcase name="`Model Relationships` → it village belongs to district" file="tests/RelationshipTest.php::`Model Relationships` → it village belongs to district" class="Tests\RelationshipTest" classname="Tests.RelationshipTest" assertions="2" time="0.006141"/>
        <testcase name="`Model Relationships` → it village has regency through district" file="tests/RelationshipTest.php::`Model Relationships` → it village has regency through district" class="Tests\RelationshipTest" classname="Tests.RelationshipTest" assertions="2" time="0.005113"/>
      </testsuite>
      <testsuite name="Tests\SeederTest" file="tests/SeederTest.php" tests="5" assertions="14" errors="0" failures="0" skipped="0" time="0.034573">
        <testcase name="`IdnAreaSeeder` → it can instantiate seeder" file="tests/SeederTest.php::`IdnAreaSeeder` → it can instantiate seeder" class="Tests\SeederTest" classname="Tests.SeederTest" assertions="1" time="0.006636"/>
        <testcase name="`IdnAreaSeeder` → it has correct data path" file="tests/SeederTest.php::`IdnAreaSeeder` → it has correct data path" class="Tests\SeederTest" classname="Tests.SeederTest" assertions="1" time="0.005450"/>
        <testcase name="`IdnAreaSeeder` → it detects existing data correctly" file="tests/SeederTest.php::`IdnAreaSeeder` → it detects existing data correctly" class="Tests\SeederTest" classname="Tests.SeederTest" assertions="2" time="0.008443"/>
        <testcase name="`IdnAreaSeeder` → it can parse boolean values correctly" file="tests/SeederTest.php::`IdnAreaSeeder` → it can parse boolean values correctly" class="Tests\SeederTest" classname="Tests.SeederTest" assertions="8" time="0.007195"/>
        <testcase name="`IdnAreaSeeder` → it throws exception for missing CSV file" file="tests/SeederTest.php::`IdnAreaSeeder` → it throws exception for missing CSV file" class="Tests\SeederTest" classname="Tests.SeederTest" assertions="2" time="0.006848"/>
      </testsuite>
      <testsuite name="Tests\Unit\IdnAreaManagerTest" file="tests/Unit/IdnAreaManagerTest.php" tests="13" assertions="47" errors="0" failures="0" skipped="0" time="0.104574">
        <testcase name="it uses local service when in local mode" file="tests/Unit/IdnAreaManagerTest.php::it uses local service when in local mode" class="Tests\Unit\IdnAreaManagerTest" classname="Tests.Unit.IdnAreaManagerTest" assertions="3" time="0.007169"/>
        <testcase name="it uses API service when in API mode" file="tests/Unit/IdnAreaManagerTest.php::it uses API service when in API mode" class="Tests\Unit\IdnAreaManagerTest" classname="Tests.Unit.IdnAreaManagerTest" assertions="2" time="0.028904"/>
        <testcase name="it defaults to local mode when mode is not configured" file="tests/Unit/IdnAreaManagerTest.php::it defaults to local mode when mode is not configured" class="Tests\Unit\IdnAreaManagerTest" classname="Tests.Unit.IdnAreaManagerTest" assertions="3" time="0.005937"/>
        <testcase name="it can get regencies by province code in local mode" file="tests/Unit/IdnAreaManagerTest.php::it can get regencies by province code in local mode" class="Tests\Unit\IdnAreaManagerTest" classname="Tests.Unit.IdnAreaManagerTest" assertions="3" time="0.006300"/>
        <testcase name="it can get regencies by province code in API mode" file="tests/Unit/IdnAreaManagerTest.php::it can get regencies by province code in API mode" class="Tests\Unit\IdnAreaManagerTest" classname="Tests.Unit.IdnAreaManagerTest" assertions="2" time="0.005459"/>
        <testcase name="it can get districts by regency code in both modes" file="tests/Unit/IdnAreaManagerTest.php::it can get districts by regency code in both modes" class="Tests\Unit\IdnAreaManagerTest" classname="Tests.Unit.IdnAreaManagerTest" assertions="5" time="0.006106"/>
        <testcase name="it can get villages by district code in both modes" file="tests/Unit/IdnAreaManagerTest.php::it can get villages by district code in both modes" class="Tests\Unit\IdnAreaManagerTest" classname="Tests.Unit.IdnAreaManagerTest" assertions="5" time="0.006546"/>
        <testcase name="it can find by code in local mode" file="tests/Unit/IdnAreaManagerTest.php::it can find by code in local mode" class="Tests\Unit\IdnAreaManagerTest" classname="Tests.Unit.IdnAreaManagerTest" assertions="8" time="0.006147"/>
        <testcase name="it can search by name in local mode" file="tests/Unit/IdnAreaManagerTest.php::it can search by name in local mode" class="Tests\Unit\IdnAreaManagerTest" classname="Tests.Unit.IdnAreaManagerTest" assertions="8" time="0.006003"/>
        <testcase name="it handles configuration changes dynamically" file="tests/Unit/IdnAreaManagerTest.php::it handles configuration changes dynamically" class="Tests\Unit\IdnAreaManagerTest" classname="Tests.Unit.IdnAreaManagerTest" assertions="3" time="0.006457"/>
        <testcase name="it maintains service instances correctly" file="tests/Unit/IdnAreaManagerTest.php::it maintains service instances correctly" class="Tests\Unit\IdnAreaManagerTest" classname="Tests.Unit.IdnAreaManagerTest" assertions="1" time="0.005288"/>
        <testcase name="it can get current mode" file="tests/Unit/IdnAreaManagerTest.php::it can get current mode" class="Tests\Unit\IdnAreaManagerTest" classname="Tests.Unit.IdnAreaManagerTest" assertions="2" time="0.007141"/>
        <testcase name="it validates service availability" file="tests/Unit/IdnAreaManagerTest.php::it validates service availability" class="Tests\Unit\IdnAreaManagerTest" classname="Tests.Unit.IdnAreaManagerTest" assertions="2" time="0.007115"/>
      </testsuite>
      <testsuite name="Tests\Unit\IdnAreaTest" file="tests/Unit/IdnAreaTest.php" tests="15" assertions="47" errors="0" failures="0" skipped="0" time="0.199472">
        <testcase name="it can get all provinces" file="tests/Unit/IdnAreaTest.php::it can get all provinces" class="Tests\Unit\IdnAreaTest" classname="Tests.Unit.IdnAreaTest" assertions="3" time="0.010711"/>
        <testcase name="it can get a province by code" file="tests/Unit/IdnAreaTest.php::it can get a province by code" class="Tests\Unit\IdnAreaTest" classname="Tests.Unit.IdnAreaTest" assertions="3" time="0.007750"/>
        <testcase name="it returns null for non-existent province" file="tests/Unit/IdnAreaTest.php::it returns null for non-existent province" class="Tests\Unit\IdnAreaTest" classname="Tests.Unit.IdnAreaTest" assertions="1" time="0.009897"/>
        <testcase name="it can get regencies by province" file="tests/Unit/IdnAreaTest.php::it can get regencies by province" class="Tests\Unit\IdnAreaTest" classname="Tests.Unit.IdnAreaTest" assertions="3" time="0.011589"/>
        <testcase name="it can get districts by regency" file="tests/Unit/IdnAreaTest.php::it can get districts by regency" class="Tests\Unit\IdnAreaTest" classname="Tests.Unit.IdnAreaTest" assertions="3" time="0.009450"/>
        <testcase name="it can get all districts by regency" file="tests/Unit/IdnAreaTest.php::it can get all districts by regency" class="Tests\Unit\IdnAreaTest" classname="Tests.Unit.IdnAreaTest" assertions="1" time="0.009666"/>
        <testcase name="it can get villages by district" file="tests/Unit/IdnAreaTest.php::it can get villages by district" class="Tests\Unit\IdnAreaTest" classname="Tests.Unit.IdnAreaTest" assertions="3" time="0.006289"/>
        <testcase name="it can search areas" file="tests/Unit/IdnAreaTest.php::it can search areas" class="Tests\Unit\IdnAreaTest" classname="Tests.Unit.IdnAreaTest" assertions="3" time="0.008399"/>
        <testcase name="it can search with partial match" file="tests/Unit/IdnAreaTest.php::it can search with partial match" class="Tests\Unit\IdnAreaTest" classname="Tests.Unit.IdnAreaTest" assertions="2" time="0.010719"/>
        <testcase name="it can get hierarchy" file="tests/Unit/IdnAreaTest.php::it can get hierarchy" class="Tests\Unit\IdnAreaTest" classname="Tests.Unit.IdnAreaTest" assertions="5" time="0.012164"/>
        <testcase name="it can get statistics" file="tests/Unit/IdnAreaTest.php::it can get statistics" class="Tests\Unit\IdnAreaTest" classname="Tests.Unit.IdnAreaTest" assertions="9" time="0.010671"/>
        <testcase name="it can get multiple areas by codes" file="tests/Unit/IdnAreaTest.php::it can get multiple areas by codes" class="Tests\Unit\IdnAreaTest" classname="Tests.Unit.IdnAreaTest" assertions="3" time="0.018401"/>
        <testcase name="it can clear cache" file="tests/Unit/IdnAreaTest.php::it can clear cache" class="Tests\Unit\IdnAreaTest" classname="Tests.Unit.IdnAreaTest" assertions="1" time="0.005891"/>
        <testcase name="it handles empty search results gracefully" file="tests/Unit/IdnAreaTest.php::it handles empty search results gracefully" class="Tests\Unit\IdnAreaTest" classname="Tests.Unit.IdnAreaTest" assertions="5" time="0.036392"/>
        <testcase name="it returns empty array for non-existent province hierarchy" file="tests/Unit/IdnAreaTest.php::it returns empty array for non-existent province hierarchy" class="Tests\Unit\IdnAreaTest" classname="Tests.Unit.IdnAreaTest" assertions="2" time="0.031483"/>
      </testsuite>
      <testsuite name="Tests\Unit\LocalDataServiceTest" file="tests/Unit/LocalDataServiceTest.php" tests="18" assertions="45" errors="0" failures="0" skipped="0" time="0.133562">
        <testcase name="it can get all provinces" file="tests/Unit/LocalDataServiceTest.php::it can get all provinces" class="Tests\Unit\LocalDataServiceTest" classname="Tests.Unit.LocalDataServiceTest" assertions="5" time="0.010399"/>
        <testcase name="it can get regencies by province code" file="tests/Unit/LocalDataServiceTest.php::it can get regencies by province code" class="Tests\Unit\LocalDataServiceTest" classname="Tests.Unit.LocalDataServiceTest" assertions="3" time="0.006626"/>
        <testcase name="it can get districts by regency code" file="tests/Unit/LocalDataServiceTest.php::it can get districts by regency code" class="Tests\Unit\LocalDataServiceTest" classname="Tests.Unit.LocalDataServiceTest" assertions="3" time="0.010789"/>
        <testcase name="it can get villages by district code" file="tests/Unit/LocalDataServiceTest.php::it can get villages by district code" class="Tests\Unit\LocalDataServiceTest" classname="Tests.Unit.LocalDataServiceTest" assertions="3" time="0.012058"/>
        <testcase name="it returns empty array for non-existent province" file="tests/Unit/LocalDataServiceTest.php::it returns empty array for non-existent province" class="Tests\Unit\LocalDataServiceTest" classname="Tests.Unit.LocalDataServiceTest" assertions="2" time="0.006814"/>
        <testcase name="it can get province by code" file="tests/Unit/LocalDataServiceTest.php::it can get province by code" class="Tests\Unit\LocalDataServiceTest" classname="Tests.Unit.LocalDataServiceTest" assertions="2" time="0.007646"/>
        <testcase name="it can get regency by code" file="tests/Unit/LocalDataServiceTest.php::it can get regency by code" class="Tests\Unit\LocalDataServiceTest" classname="Tests.Unit.LocalDataServiceTest" assertions="2" time="0.006142"/>
        <testcase name="it can get district by code" file="tests/Unit/LocalDataServiceTest.php::it can get district by code" class="Tests\Unit\LocalDataServiceTest" classname="Tests.Unit.LocalDataServiceTest" assertions="2" time="0.006772"/>
        <testcase name="it can get village by code" file="tests/Unit/LocalDataServiceTest.php::it can get village by code" class="Tests\Unit\LocalDataServiceTest" classname="Tests.Unit.LocalDataServiceTest" assertions="2" time="0.005222"/>
        <testcase name="it returns null for non-existent codes" file="tests/Unit/LocalDataServiceTest.php::it returns null for non-existent codes" class="Tests\Unit\LocalDataServiceTest" classname="Tests.Unit.LocalDataServiceTest" assertions="4" time="0.005762"/>
        <testcase name="it can search provinces by name" file="tests/Unit/LocalDataServiceTest.php::it can search provinces by name" class="Tests\Unit\LocalDataServiceTest" classname="Tests.Unit.LocalDataServiceTest" assertions="2" time="0.006719"/>
        <testcase name="it can search regencies by name" file="tests/Unit/LocalDataServiceTest.php::it can search regencies by name" class="Tests\Unit\LocalDataServiceTest" classname="Tests.Unit.LocalDataServiceTest" assertions="2" time="0.005270"/>
        <testcase name="it can search districts by name" file="tests/Unit/LocalDataServiceTest.php::it can search districts by name" class="Tests\Unit\LocalDataServiceTest" classname="Tests.Unit.LocalDataServiceTest" assertions="2" time="0.009921"/>
        <testcase name="it can search villages by name" file="tests/Unit/LocalDataServiceTest.php::it can search villages by name" class="Tests\Unit\LocalDataServiceTest" classname="Tests.Unit.LocalDataServiceTest" assertions="2" time="0.007532"/>
        <testcase name="it handles case insensitive search" file="tests/Unit/LocalDataServiceTest.php::it handles case insensitive search" class="Tests\Unit\LocalDataServiceTest" classname="Tests.Unit.LocalDataServiceTest" assertions="2" time="0.007084"/>
        <testcase name="it handles partial name search" file="tests/Unit/LocalDataServiceTest.php::it handles partial name search" class="Tests\Unit\LocalDataServiceTest" classname="Tests.Unit.LocalDataServiceTest" assertions="2" time="0.005898"/>
        <testcase name="it returns paginated results when requested" file="tests/Unit/LocalDataServiceTest.php::it returns paginated results when requested" class="Tests\Unit\LocalDataServiceTest" classname="Tests.Unit.LocalDataServiceTest" assertions="1" time="0.006572"/>
        <testcase name="it can count total records" file="tests/Unit/LocalDataServiceTest.php::it can count total records" class="Tests\Unit\LocalDataServiceTest" classname="Tests.Unit.LocalDataServiceTest" assertions="4" time="0.006336"/>
      </testsuite>
      <testsuite name="Tests\Unit\Models\ProvinceTest" file="tests/Unit/Models/ProvinceTest.php" tests="13" assertions="28" errors="0" failures="0" skipped="0" time="0.065818">
        <testcase name="it can create a province" file="tests/Unit/Models/ProvinceTest.php::it can create a province" class="Tests\Unit\Models\ProvinceTest" classname="Tests.Unit.Models.ProvinceTest" assertions="3" time="0.009871"/>
        <testcase name="it has correct fillable attributes" file="tests/Unit/Models/ProvinceTest.php::it has correct fillable attributes" class="Tests\Unit\Models\ProvinceTest" classname="Tests.Unit.Models.ProvinceTest" assertions="1" time="0.004781"/>
        <testcase name="it has correct casts" file="tests/Unit/Models/ProvinceTest.php::it has correct casts" class="Tests\Unit\Models\ProvinceTest" classname="Tests.Unit.Models.ProvinceTest" assertions="8" time="0.003849"/>
        <testcase name="it uses code as primary key" file="tests/Unit/Models/ProvinceTest.php::it uses code as primary key" class="Tests\Unit\Models\ProvinceTest" classname="Tests.Unit.Models.ProvinceTest" assertions="3" time="0.003865"/>
        <testcase name="it can have regencies" file="tests/Unit/Models/ProvinceTest.php::it can have regencies" class="Tests\Unit\Models\ProvinceTest" classname="Tests.Unit.Models.ProvinceTest" assertions="2" time="0.004350"/>
        <testcase name="it can access districts through regencies" file="tests/Unit/Models/ProvinceTest.php::it can access districts through regencies" class="Tests\Unit\Models\ProvinceTest" classname="Tests.Unit.Models.ProvinceTest" assertions="2" time="0.005013"/>
        <testcase name="it can search provinces" file="tests/Unit/Models/ProvinceTest.php::it can search provinces" class="Tests\Unit\Models\ProvinceTest" classname="Tests.Unit.Models.ProvinceTest" assertions="2" time="0.004412"/>
        <testcase name="it can get provinces with regency count" file="tests/Unit/Models/ProvinceTest.php::it can get provinces with regency count" class="Tests\Unit\Models\ProvinceTest" classname="Tests.Unit.Models.ProvinceTest" assertions="1" time="0.005106"/>
        <testcase name="it has formatted name attribute" file="tests/Unit/Models/ProvinceTest.php::it has formatted name attribute" class="Tests\Unit\Models\ProvinceTest" classname="Tests.Unit.Models.ProvinceTest" assertions="1" time="0.005405"/>
        <testcase name="it can check if has regencies" file="tests/Unit/Models/ProvinceTest.php::it can check if has regencies" class="Tests\Unit\Models\ProvinceTest" classname="Tests.Unit.Models.ProvinceTest" assertions="2" time="0.004560"/>
        <testcase name="it can get total districts count" file="tests/Unit/Models/ProvinceTest.php::it can get total districts count" class="Tests\Unit\Models\ProvinceTest" classname="Tests.Unit.Models.ProvinceTest" assertions="1" time="0.004463"/>
        <testcase name="it can get total villages count" file="tests/Unit/Models/ProvinceTest.php::it can get total villages count" class="Tests\Unit\Models\ProvinceTest" classname="Tests.Unit.Models.ProvinceTest" assertions="1" time="0.005652"/>
        <testcase name="it uses code as route key" file="tests/Unit/Models/ProvinceTest.php::it uses code as route key" class="Tests\Unit\Models\ProvinceTest" classname="Tests.Unit.Models.ProvinceTest" assertions="1" time="0.004490"/>
      </testsuite>
      <testsuite name="Tests\Unit\ModelsTest" file="tests/Unit/ModelsTest.php" tests="28" assertions="52" errors="0" failures="0" skipped="0" time="0.134249">
        <testcase name="`Province Model` → it can create a province" file="tests/Unit/ModelsTest.php::`Province Model` → it can create a province" class="Tests\Unit\ModelsTest" classname="Tests.Unit.ModelsTest" assertions="2" time="0.007723"/>
        <testcase name="`Province Model` → it has regencies relationship" file="tests/Unit/ModelsTest.php::`Province Model` → it has regencies relationship" class="Tests\Unit\ModelsTest" classname="Tests.Unit.ModelsTest" assertions="2" time="0.004975"/>
        <testcase name="`Province Model` → it can search by name" file="tests/Unit/ModelsTest.php::`Province Model` → it can search by name" class="Tests\Unit\ModelsTest" classname="Tests.Unit.ModelsTest" assertions="2" time="0.004342"/>
        <testcase name="`Province Model` → it can find by code" file="tests/Unit/ModelsTest.php::`Province Model` → it can find by code" class="Tests\Unit\ModelsTest" classname="Tests.Unit.ModelsTest" assertions="2" time="0.004646"/>
        <testcase name="`Province Model` → it returns null for non-existent code" file="tests/Unit/ModelsTest.php::`Province Model` → it returns null for non-existent code" class="Tests\Unit\ModelsTest" classname="Tests.Unit.ModelsTest" assertions="1" time="0.004609"/>
        <testcase name="`Province Model` → it uses correct table name" file="tests/Unit/ModelsTest.php::`Province Model` → it uses correct table name" class="Tests\Unit\ModelsTest" classname="Tests.Unit.ModelsTest" assertions="1" time="0.004620"/>
        <testcase name="`Province Model` → it has fillable attributes" file="tests/Unit/ModelsTest.php::`Province Model` → it has fillable attributes" class="Tests\Unit\ModelsTest" classname="Tests.Unit.ModelsTest" assertions="2" time="0.004209"/>
        <testcase name="`Regency Model` → it can create a regency" file="tests/Unit/ModelsTest.php::`Regency Model` → it can create a regency" class="Tests\Unit\ModelsTest" classname="Tests.Unit.ModelsTest" assertions="3" time="0.004190"/>
        <testcase name="`Regency Model` → it has province relationship" file="tests/Unit/ModelsTest.php::`Regency Model` → it has province relationship" class="Tests\Unit\ModelsTest" classname="Tests.Unit.ModelsTest" assertions="2" time="0.004900"/>
        <testcase name="`Regency Model` → it has districts relationship" file="tests/Unit/ModelsTest.php::`Regency Model` → it has districts relationship" class="Tests\Unit\ModelsTest" classname="Tests.Unit.ModelsTest" assertions="2" time="0.004395"/>
        <testcase name="`Regency Model` → it can find by province" file="tests/Unit/ModelsTest.php::`Regency Model` → it can find by province" class="Tests\Unit\ModelsTest" classname="Tests.Unit.ModelsTest" assertions="2" time="0.004273"/>
        <testcase name="`Regency Model` → it uses correct table name" file="tests/Unit/ModelsTest.php::`Regency Model` → it uses correct table name" class="Tests\Unit\ModelsTest" classname="Tests.Unit.ModelsTest" assertions="1" time="0.003983"/>
        <testcase name="`District Model` → it can create a district" file="tests/Unit/ModelsTest.php::`District Model` → it can create a district" class="Tests\Unit\ModelsTest" classname="Tests.Unit.ModelsTest" assertions="3" time="0.004500"/>
        <testcase name="`District Model` → it has regency relationship" file="tests/Unit/ModelsTest.php::`District Model` → it has regency relationship" class="Tests\Unit\ModelsTest" classname="Tests.Unit.ModelsTest" assertions="2" time="0.004401"/>
        <testcase name="`District Model` → it has villages relationship" file="tests/Unit/ModelsTest.php::`District Model` → it has villages relationship" class="Tests\Unit\ModelsTest" classname="Tests.Unit.ModelsTest" assertions="2" time="0.004304"/>
        <testcase name="`District Model` → it can find by regency" file="tests/Unit/ModelsTest.php::`District Model` → it can find by regency" class="Tests\Unit\ModelsTest" classname="Tests.Unit.ModelsTest" assertions="2" time="0.005001"/>
        <testcase name="`District Model` → it uses correct table name" file="tests/Unit/ModelsTest.php::`District Model` → it uses correct table name" class="Tests\Unit\ModelsTest" classname="Tests.Unit.ModelsTest" assertions="1" time="0.004318"/>
        <testcase name="`Village Model` → it can create a village" file="tests/Unit/ModelsTest.php::`Village Model` → it can create a village" class="Tests\Unit\ModelsTest" classname="Tests.Unit.ModelsTest" assertions="3" time="0.004294"/>
        <testcase name="`Village Model` → it has district relationship" file="tests/Unit/ModelsTest.php::`Village Model` → it has district relationship" class="Tests\Unit\ModelsTest" classname="Tests.Unit.ModelsTest" assertions="2" time="0.004350"/>
        <testcase name="`Village Model` → it can find by district" file="tests/Unit/ModelsTest.php::`Village Model` → it can find by district" class="Tests\Unit\ModelsTest" classname="Tests.Unit.ModelsTest" assertions="2" time="0.005116"/>
        <testcase name="`Village Model` → it uses correct table name" file="tests/Unit/ModelsTest.php::`Village Model` → it uses correct table name" class="Tests\Unit\ModelsTest" classname="Tests.Unit.ModelsTest" assertions="1" time="0.004828"/>
        <testcase name="`Model Search Functionality` → it performs case insensitive search" file="tests/Unit/ModelsTest.php::`Model Search Functionality` → it performs case insensitive search" class="Tests\Unit\ModelsTest" classname="Tests.Unit.ModelsTest" assertions="2" time="0.004221"/>
        <testcase name="`Model Search Functionality` → it performs partial name search" file="tests/Unit/ModelsTest.php::`Model Search Functionality` → it performs partial name search" class="Tests\Unit\ModelsTest" classname="Tests.Unit.ModelsTest" assertions="2" time="0.004378"/>
        <testcase name="`Model Search Functionality` → it returns empty results for non-matching search" file="tests/Unit/ModelsTest.php::`Model Search Functionality` → it returns empty results for non-matching search" class="Tests\Unit\ModelsTest" classname="Tests.Unit.ModelsTest" assertions="1" time="0.007832"/>
        <testcase name="`Model Validation` → it requires code field" file="tests/Unit/ModelsTest.php::`Model Validation` → it requires code field" class="Tests\Unit\ModelsTest" classname="Tests.Unit.ModelsTest" assertions="1" time="0.004873"/>
        <testcase name="`Model Validation` → it requires name field" file="tests/Unit/ModelsTest.php::`Model Validation` → it requires name field" class="Tests\Unit\ModelsTest" classname="Tests.Unit.ModelsTest" assertions="1" time="0.004861"/>
        <testcase name="`Model Validation` → it enforces unique code constraint" file="tests/Unit/ModelsTest.php::`Model Validation` → it enforces unique code constraint" class="Tests\Unit\ModelsTest" classname="Tests.Unit.ModelsTest" assertions="1" time="0.005095"/>
        <testcase name="`Model Relationships Cascade` → it maintains referential integrity" file="tests/Unit/ModelsTest.php::`Model Relationships Cascade` → it maintains referential integrity" class="Tests\Unit\ModelsTest" classname="Tests.Unit.ModelsTest" assertions="4" time="0.005012"/>
      </testsuite>
    </testsuite>
  </testsuite>
</testsuites>
