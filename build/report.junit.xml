<?xml version="1.0" encoding="UTF-8"?>
<testsuites>
  <testsuite name="/Users/zaid/codes/idn-area-laravel-12/phpunit.xml.dist" tests="379" assertions="768" errors="0" failures="0" skipped="0" time="6.708036">
    <testsuite name="zaidysf/IdnArea Test Suite" tests="379" assertions="768" errors="0" failures="0" skipped="0" time="6.708036">
      <testsuite name="Tests\ArchTest" file="tests/ArchTest.php" tests="7" assertions="18" errors="0" failures="0" skipped="0" time="0.484608">
        <testcase name="it will not use debugging functions" file="tests/ArchTest.php::it will not use debugging functions" class="Tests\ArchTest" classname="Tests.ArchTest" assertions="5" time="0.349211"/>
        <testcase name="models extend Illuminate\Database\Eloquent\Model" file="tests/ArchTest.php::models extend Illuminate\Database\Eloquent\Model" class="Tests\ArchTest" classname="Tests.ArchTest" assertions="1" time="0.023546"/>
        <testcase name="models are in Models namespace" file="tests/ArchTest.php::models are in Models namespace" class="Tests\ArchTest" classname="Tests.ArchTest" assertions="1" time="0.004390"/>
        <testcase name="services are in Services namespace" file="tests/ArchTest.php::services are in Services namespace" class="Tests\ArchTest" classname="Tests.ArchTest" assertions="1" time="0.032576"/>
        <testcase name="commands extend Illuminate\Console\Command" file="tests/ArchTest.php::commands extend Illuminate\Console\Command" class="Tests\ArchTest" classname="Tests.ArchTest" assertions="1" time="0.043951"/>
        <testcase name="facades extend Illuminate\Support\Facades\Facade" file="tests/ArchTest.php::facades extend Illuminate\Support\Facades\Facade" class="Tests\ArchTest" classname="Tests.ArchTest" assertions="1" time="0.005123"/>
        <testcase name="ensure no Laravel helpers are used in models" file="tests/ArchTest.php::ensure no Laravel helpers are used in models" class="Tests\ArchTest" classname="Tests.ArchTest" assertions="8" time="0.025811"/>
      </testsuite>
      <testsuite name="Tests\Architecture\GeneralTest" file="tests/Architecture/GeneralTest.php" tests="11" assertions="11" errors="0" failures="0" skipped="0" time="0.173688">
        <testcase name="it will not use debugging functions" file="tests/Architecture/GeneralTest.php::it will not use debugging functions" class="Tests\Architecture\GeneralTest" classname="Tests.Architecture.GeneralTest" assertions="1" time="0.016604"/>
        <testcase name="models should extend Eloquent" file="tests/Architecture/GeneralTest.php::models should extend Eloquent" class="Tests\Architecture\GeneralTest" classname="Tests.Architecture.GeneralTest" assertions="1" time="0.003770"/>
        <testcase name="commands should extend Command" file="tests/Architecture/GeneralTest.php::commands should extend Command" class="Tests\Architecture\GeneralTest" classname="Tests.Architecture.GeneralTest" assertions="1" time="0.003558"/>
        <testcase name="facades should extend Facade" file="tests/Architecture/GeneralTest.php::facades should extend Facade" class="Tests\Architecture\GeneralTest" classname="Tests.Architecture.GeneralTest" assertions="1" time="0.003384"/>
        <testcase name="service provider should extend PackageServiceProvider" file="tests/Architecture/GeneralTest.php::service provider should extend PackageServiceProvider" class="Tests\Architecture\GeneralTest" classname="Tests.Architecture.GeneralTest" assertions="1" time="0.005262"/>
        <testcase name="models should use factories" file="tests/Architecture/GeneralTest.php::models should use factories" class="Tests\Architecture\GeneralTest" classname="Tests.Architecture.GeneralTest" assertions="1" time="0.006030"/>
        <testcase name="it does not use env outside of config" file="tests/Architecture/GeneralTest.php::it does not use env outside of config" class="Tests\Architecture\GeneralTest" classname="Tests.Architecture.GeneralTest" assertions="1" time="0.004747"/>
        <testcase name="controllers should not have die or exit" file="tests/Architecture/GeneralTest.php::controllers should not have die or exit" class="Tests\Architecture\GeneralTest" classname="Tests.Architecture.GeneralTest" assertions="1" time="0.004509"/>
        <testcase name="it will not use compact() function" file="tests/Architecture/GeneralTest.php::it will not use compact() function" class="Tests\Architecture\GeneralTest" classname="Tests.Architecture.GeneralTest" assertions="1" time="0.004206"/>
        <testcase name="ensure no use of globals" file="tests/Architecture/GeneralTest.php::ensure no use of globals" class="Tests\Architecture\GeneralTest" classname="Tests.Architecture.GeneralTest" assertions="1" time="0.005659"/>
        <testcase name="classes should be final or abstract" file="tests/Architecture/GeneralTest.php::classes should be final or abstract" class="Tests\Architecture\GeneralTest" classname="Tests.Architecture.GeneralTest" assertions="1" time="0.115959"/>
      </testsuite>
      <testsuite name="Tests\CommandTest" file="tests/CommandTest.php" tests="4" assertions="6" errors="0" failures="0" skipped="0" time="0.295024">
        <testcase name="`IdnAreaCommand` → it can instantiate command" file="tests/CommandTest.php::`IdnAreaCommand` → it can instantiate command" class="Tests\CommandTest" classname="Tests.CommandTest" assertions="1" time="0.017320"/>
        <testcase name="`IdnAreaCommand` → it has correct signature and description" file="tests/CommandTest.php::`IdnAreaCommand` → it has correct signature and description" class="Tests\CommandTest" classname="Tests.CommandTest" assertions="3" time="0.003936"/>
        <testcase name="`IdnAreaCommand` → it command is registered" file="tests/CommandTest.php::`IdnAreaCommand` → it command is registered" class="Tests\CommandTest" classname="Tests.CommandTest" assertions="1" time="0.038768"/>
        <testcase name="`IdnAreaCommand` → it can run command without force option" file="tests/CommandTest.php::`IdnAreaCommand` → it can run command without force option" class="Tests\CommandTest" classname="Tests.CommandTest" assertions="1" time="0.235000"/>
      </testsuite>
      <testsuite name="Tests\ExampleTest" file="tests/ExampleTest.php" tests="3" assertions="10" errors="0" failures="0" skipped="0" time="0.012065">
        <testcase name="it package is properly configured" file="tests/ExampleTest.php::it package is properly configured" class="Tests\ExampleTest" classname="Tests.ExampleTest" assertions="2" time="0.004151"/>
        <testcase name="it config is published correctly" file="tests/ExampleTest.php::it config is published correctly" class="Tests\ExampleTest" classname="Tests.ExampleTest" assertions="4" time="0.003715"/>
        <testcase name="it database tables exist" file="tests/ExampleTest.php::it database tables exist" class="Tests\ExampleTest" classname="Tests.ExampleTest" assertions="4" time="0.004199"/>
      </testsuite>
      <testsuite name="Tests\FacadeTest" file="tests/FacadeTest.php" tests="7" assertions="19" errors="0" failures="0" skipped="0" time="0.036574">
        <testcase name="`IdnArea Facade` → it can get provinces via facade" file="tests/FacadeTest.php::`IdnArea Facade` → it can get provinces via facade" class="Tests\FacadeTest" classname="Tests.FacadeTest" assertions="2" time="0.008028"/>
        <testcase name="`IdnArea Facade` → it can get specific province via facade" file="tests/FacadeTest.php::`IdnArea Facade` → it can get specific province via facade" class="Tests\FacadeTest" classname="Tests.FacadeTest" assertions="2" time="0.004871"/>
        <testcase name="`IdnArea Facade` → it can get regencies by province via facade" file="tests/FacadeTest.php::`IdnArea Facade` → it can get regencies by province via facade" class="Tests\FacadeTest" classname="Tests.FacadeTest" assertions="2" time="0.004215"/>
        <testcase name="`IdnArea Facade` → it can search areas via facade" file="tests/FacadeTest.php::`IdnArea Facade` → it can search areas via facade" class="Tests\FacadeTest" classname="Tests.FacadeTest" assertions="3" time="0.004178"/>
        <testcase name="`IdnArea Facade` → it can get area statistics via facade" file="tests/FacadeTest.php::`IdnArea Facade` → it can get area statistics via facade" class="Tests\FacadeTest" classname="Tests.FacadeTest" assertions="2" time="0.005525"/>
        <testcase name="`IdnArea Facade` → it returns null for non-existent areas" file="tests/FacadeTest.php::`IdnArea Facade` → it returns null for non-existent areas" class="Tests\FacadeTest" classname="Tests.FacadeTest" assertions="4" time="0.004667"/>
        <testcase name="`IdnArea Facade` → it returns empty collections for non-existent parent areas" file="tests/FacadeTest.php::`IdnArea Facade` → it returns empty collections for non-existent parent areas" class="Tests\FacadeTest" classname="Tests.FacadeTest" assertions="4" time="0.005091"/>
      </testsuite>
      <testsuite name="Tests\FactoryTest" file="tests/FactoryTest.php" tests="12" assertions="44" errors="0" failures="0" skipped="0" time="0.060808">
        <testcase name="`Model Factories` → it can create province using factory" file="tests/FactoryTest.php::`Model Factories` → it can create province using factory" class="Tests\FactoryTest" classname="Tests.FactoryTest" assertions="4" time="0.014275"/>
        <testcase name="`Model Factories` → it can create province with specific states" file="tests/FactoryTest.php::`Model Factories` → it can create province with specific states" class="Tests\FactoryTest" classname="Tests.FactoryTest" assertions="4" time="0.004200"/>
        <testcase name="`Model Factories` → it can create regency using factory" file="tests/FactoryTest.php::`Model Factories` → it can create regency using factory" class="Tests\FactoryTest" classname="Tests.FactoryTest" assertions="5" time="0.004370"/>
        <testcase name="`Model Factories` → it can create regency for specific province" file="tests/FactoryTest.php::`Model Factories` → it can create regency for specific province" class="Tests\FactoryTest" classname="Tests.FactoryTest" assertions="2" time="0.004795"/>
        <testcase name="`Model Factories` → it can create regency with specific types" file="tests/FactoryTest.php::`Model Factories` → it can create regency with specific types" class="Tests\FactoryTest" classname="Tests.FactoryTest" assertions="2" time="0.004059"/>
        <testcase name="`Model Factories` → it can create district using factory" file="tests/FactoryTest.php::`Model Factories` → it can create district using factory" class="Tests\FactoryTest" classname="Tests.FactoryTest" assertions="5" time="0.004159"/>
        <testcase name="`Model Factories` → it can create district for specific regency" file="tests/FactoryTest.php::`Model Factories` → it can create district for specific regency" class="Tests\FactoryTest" classname="Tests.FactoryTest" assertions="2" time="0.003863"/>
        <testcase name="`Model Factories` → it can create village using factory" file="tests/FactoryTest.php::`Model Factories` → it can create village using factory" class="Tests\FactoryTest" classname="Tests.FactoryTest" assertions="5" time="0.003626"/>
        <testcase name="`Model Factories` → it can create village for specific district" file="tests/FactoryTest.php::`Model Factories` → it can create village for specific district" class="Tests\FactoryTest" classname="Tests.FactoryTest" assertions="2" time="0.003759"/>
        <testcase name="`Model Factories` → it can create complete hierarchy using factories" file="tests/FactoryTest.php::`Model Factories` → it can create complete hierarchy using factories" class="Tests\FactoryTest" classname="Tests.FactoryTest" assertions="7" time="0.004367"/>
        <testcase name="`Model Factories` → it can create multiple models using factories" file="tests/FactoryTest.php::`Model Factories` → it can create multiple models using factories" class="Tests\FactoryTest" classname="Tests.FactoryTest" assertions="2" time="0.004874"/>
        <testcase name="`Model Factories` → it can make models without persisting to database" file="tests/FactoryTest.php::`Model Factories` → it can make models without persisting to database" class="Tests\FactoryTest" classname="Tests.FactoryTest" assertions="4" time="0.004461"/>
      </testsuite>
      <testsuite name="Tests\Feature\SetupCommandTest" file="tests/Feature/SetupCommandTest.php" tests="7" assertions="10" errors="0" failures="0" skipped="0" time="0.089765">
        <testcase name="it can run setup command interactively" file="tests/Feature/SetupCommandTest.php::it can run setup command interactively" class="Tests\Feature\SetupCommandTest" classname="Tests.Feature.SetupCommandTest" assertions="3" time="0.030733"/>
        <testcase name="it can run setup command with local mode parameter" file="tests/Feature/SetupCommandTest.php::it can run setup command with local mode parameter" class="Tests\Feature\SetupCommandTest" classname="Tests.Feature.SetupCommandTest" assertions="1" time="0.009322"/>
        <testcase name="it can run setup command with api mode parameter" file="tests/Feature/SetupCommandTest.php::it can run setup command with api mode parameter" class="Tests\Feature\SetupCommandTest" classname="Tests.Feature.SetupCommandTest" assertions="1" time="0.009517"/>
        <testcase name="it validates invalid mode parameter" file="tests/Feature/SetupCommandTest.php::it validates invalid mode parameter" class="Tests\Feature\SetupCommandTest" classname="Tests.Feature.SetupCommandTest" assertions="1" time="0.006073"/>
        <testcase name="it skips setup when already configured without force" file="tests/Feature/SetupCommandTest.php::it skips setup when already configured without force" class="Tests\Feature\SetupCommandTest" classname="Tests.Feature.SetupCommandTest" assertions="2" time="0.005960"/>
        <testcase name="it can force reconfigure when already setup" file="tests/Feature/SetupCommandTest.php::it can force reconfigure when already setup" class="Tests\Feature\SetupCommandTest" classname="Tests.Feature.SetupCommandTest" assertions="1" time="0.009580"/>
        <testcase name="it handles non-interactive mode correctly" file="tests/Feature/SetupCommandTest.php::it handles non-interactive mode correctly" class="Tests\Feature\SetupCommandTest" classname="Tests.Feature.SetupCommandTest" assertions="1" time="0.018579"/>
      </testsuite>
      <testsuite name="Tests\Feature\SwitchModeCommandTest" file="tests/Feature/SwitchModeCommandTest.php" tests="10" assertions="14" errors="0" failures="0" skipped="0" time="0.045577">
        <testcase name="it can switch to api mode" file="tests/Feature/SwitchModeCommandTest.php::it can switch to api mode" class="Tests\Feature\SwitchModeCommandTest" classname="Tests.Feature.SwitchModeCommandTest" assertions="1" time="0.005298"/>
        <testcase name="it can switch to local mode" file="tests/Feature/SwitchModeCommandTest.php::it can switch to local mode" class="Tests\Feature\SwitchModeCommandTest" classname="Tests.Feature.SwitchModeCommandTest" assertions="1" time="0.004054"/>
        <testcase name="it validates invalid mode parameter" file="tests/Feature/SwitchModeCommandTest.php::it validates invalid mode parameter" class="Tests\Feature\SwitchModeCommandTest" classname="Tests.Feature.SwitchModeCommandTest" assertions="1" time="0.003971"/>
        <testcase name="it shows current mode when already in target mode" file="tests/Feature/SwitchModeCommandTest.php::it shows current mode when already in target mode" class="Tests\Feature\SwitchModeCommandTest" classname="Tests.Feature.SwitchModeCommandTest" assertions="2" time="0.005049"/>
        <testcase name="it can skip validation checks" file="tests/Feature/SwitchModeCommandTest.php::it can skip validation checks" class="Tests\Feature\SwitchModeCommandTest" classname="Tests.Feature.SwitchModeCommandTest" assertions="1" time="0.004097"/>
        <testcase name="it can skip migration step" file="tests/Feature/SwitchModeCommandTest.php::it can skip migration step" class="Tests\Feature\SwitchModeCommandTest" classname="Tests.Feature.SwitchModeCommandTest" assertions="1" time="0.004135"/>
        <testcase name="it can skip seeding step" file="tests/Feature/SwitchModeCommandTest.php::it can skip seeding step" class="Tests\Feature\SwitchModeCommandTest" classname="Tests.Feature.SwitchModeCommandTest" assertions="1" time="0.004255"/>
        <testcase name="it handles interactive mode selection" file="tests/Feature/SwitchModeCommandTest.php::it handles interactive mode selection" class="Tests\Feature\SwitchModeCommandTest" classname="Tests.Feature.SwitchModeCommandTest" assertions="4" time="0.005812"/>
        <testcase name="it validates prerequisites for api mode" file="tests/Feature/SwitchModeCommandTest.php::it validates prerequisites for api mode" class="Tests\Feature\SwitchModeCommandTest" classname="Tests.Feature.SwitchModeCommandTest" assertions="1" time="0.004755"/>
        <testcase name="it validates prerequisites for local mode" file="tests/Feature/SwitchModeCommandTest.php::it validates prerequisites for local mode" class="Tests\Feature\SwitchModeCommandTest" classname="Tests.Feature.SwitchModeCommandTest" assertions="1" time="0.004152"/>
      </testsuite>
      <testsuite name="Tests\IdnAreaTest" file="tests/IdnAreaTest.php" tests="12" assertions="44" errors="0" failures="0" skipped="0" time="0.050422">
        <testcase name="it can instantiate the main class" file="tests/IdnAreaTest.php::it can instantiate the main class" class="Tests\IdnAreaTest" classname="Tests.IdnAreaTest" assertions="1" time="0.003535"/>
        <testcase name="it can get empty provinces collection" file="tests/IdnAreaTest.php::it can get empty provinces collection" class="Tests\IdnAreaTest" classname="Tests.IdnAreaTest" assertions="2" time="0.003340"/>
        <testcase name="it can search areas with empty results" file="tests/IdnAreaTest.php::it can search areas with empty results" class="Tests\IdnAreaTest" classname="Tests.IdnAreaTest" assertions="5" time="0.003577"/>
        <testcase name="it can get statistics with zero counts" file="tests/IdnAreaTest.php::it can get statistics with zero counts" class="Tests\IdnAreaTest" classname="Tests.IdnAreaTest" assertions="7" time="0.004021"/>
        <testcase name="it province model has correct configuration" file="tests/IdnAreaTest.php::it province model has correct configuration" class="Tests\IdnAreaTest" classname="Tests.IdnAreaTest" assertions="4" time="0.003495"/>
        <testcase name="it regency model has correct configuration" file="tests/IdnAreaTest.php::it regency model has correct configuration" class="Tests\IdnAreaTest" classname="Tests.IdnAreaTest" assertions="4" time="0.004152"/>
        <testcase name="it district model has correct configuration" file="tests/IdnAreaTest.php::it district model has correct configuration" class="Tests\IdnAreaTest" classname="Tests.IdnAreaTest" assertions="4" time="0.003888"/>
        <testcase name="it village model has correct configuration" file="tests/IdnAreaTest.php::it village model has correct configuration" class="Tests\IdnAreaTest" classname="Tests.IdnAreaTest" assertions="4" time="0.004003"/>
        <testcase name="it can use facade" file="tests/IdnAreaTest.php::it can use facade" class="Tests\IdnAreaTest" classname="Tests.IdnAreaTest" assertions="1" time="0.005235"/>
        <testcase name="it can create and retrieve province" file="tests/IdnAreaTest.php::it can create and retrieve province" class="Tests\IdnAreaTest" classname="Tests.IdnAreaTest" assertions="5" time="0.006573"/>
        <testcase name="it can create regency with province relationship" file="tests/IdnAreaTest.php::it can create regency with province relationship" class="Tests\IdnAreaTest" classname="Tests.IdnAreaTest" assertions="4" time="0.004005"/>
        <testcase name="it can test search with sample data" file="tests/IdnAreaTest.php::it can test search with sample data" class="Tests\IdnAreaTest" classname="Tests.IdnAreaTest" assertions="3" time="0.004597"/>
      </testsuite>
      <testsuite name="Tests\RelationshipTest" file="tests/RelationshipTest.php" tests="8" assertions="16" errors="0" failures="0" skipped="0" time="0.034409">
        <testcase name="`Model Relationships` → it province has many regencies" file="tests/RelationshipTest.php::`Model Relationships` → it province has many regencies" class="Tests\RelationshipTest" classname="Tests.RelationshipTest" assertions="2" time="0.004483"/>
        <testcase name="`Model Relationships` → it province has many districts through regencies" file="tests/RelationshipTest.php::`Model Relationships` → it province has many districts through regencies" class="Tests\RelationshipTest" classname="Tests.RelationshipTest" assertions="2" time="0.004476"/>
        <testcase name="`Model Relationships` → it regency belongs to province" file="tests/RelationshipTest.php::`Model Relationships` → it regency belongs to province" class="Tests\RelationshipTest" classname="Tests.RelationshipTest" assertions="2" time="0.004137"/>
        <testcase name="`Model Relationships` → it regency has many districts" file="tests/RelationshipTest.php::`Model Relationships` → it regency has many districts" class="Tests\RelationshipTest" classname="Tests.RelationshipTest" assertions="2" time="0.004890"/>
        <testcase name="`Model Relationships` → it district belongs to regency" file="tests/RelationshipTest.php::`Model Relationships` → it district belongs to regency" class="Tests\RelationshipTest" classname="Tests.RelationshipTest" assertions="2" time="0.004338"/>
        <testcase name="`Model Relationships` → it district has many villages" file="tests/RelationshipTest.php::`Model Relationships` → it district has many villages" class="Tests\RelationshipTest" classname="Tests.RelationshipTest" assertions="2" time="0.004035"/>
        <testcase name="`Model Relationships` → it village belongs to district" file="tests/RelationshipTest.php::`Model Relationships` → it village belongs to district" class="Tests\RelationshipTest" classname="Tests.RelationshipTest" assertions="2" time="0.004047"/>
        <testcase name="`Model Relationships` → it village has regency through district" file="tests/RelationshipTest.php::`Model Relationships` → it village has regency through district" class="Tests\RelationshipTest" classname="Tests.RelationshipTest" assertions="2" time="0.004003"/>
      </testsuite>
      <testsuite name="Tests\SeederTest" file="tests/SeederTest.php" tests="5" assertions="14" errors="0" failures="0" skipped="0" time="0.016783">
        <testcase name="`IdnAreaSeeder` → it can instantiate seeder" file="tests/SeederTest.php::`IdnAreaSeeder` → it can instantiate seeder" class="Tests\SeederTest" classname="Tests.SeederTest" assertions="1" time="0.003506"/>
        <testcase name="`IdnAreaSeeder` → it has correct data path" file="tests/SeederTest.php::`IdnAreaSeeder` → it has correct data path" class="Tests\SeederTest" classname="Tests.SeederTest" assertions="1" time="0.003224"/>
        <testcase name="`IdnAreaSeeder` → it detects existing data correctly" file="tests/SeederTest.php::`IdnAreaSeeder` → it detects existing data correctly" class="Tests\SeederTest" classname="Tests.SeederTest" assertions="2" time="0.003568"/>
        <testcase name="`IdnAreaSeeder` → it can parse boolean values correctly" file="tests/SeederTest.php::`IdnAreaSeeder` → it can parse boolean values correctly" class="Tests\SeederTest" classname="Tests.SeederTest" assertions="8" time="0.003276"/>
        <testcase name="`IdnAreaSeeder` → it throws exception for missing CSV file" file="tests/SeederTest.php::`IdnAreaSeeder` → it throws exception for missing CSV file" class="Tests\SeederTest" classname="Tests.SeederTest" assertions="2" time="0.003208"/>
      </testsuite>
      <testsuite name="IdnAreaCacheCommandTest" file="Idn Area Cache Command" tests="22" assertions="33" errors="0" failures="0" skipped="0" time="0.241609">
        <testcase name="Command signature is correct" file="Idn Area Cache Command::Command signature is correct" class="IdnAreaCacheCommandTest" classname="IdnAreaCacheCommandTest" assertions="3" time="0.010528"/>
        <testcase name="Command description is set" file="Idn Area Cache Command::Command description is set" class="IdnAreaCacheCommandTest" classname="IdnAreaCacheCommandTest" assertions="1" time="0.008215"/>
        <testcase name="Command shows header" file="Idn Area Cache Command::Command shows header" class="IdnAreaCacheCommandTest" classname="IdnAreaCacheCommandTest" assertions="2" time="0.013876"/>
        <testcase name="Command clear cache with force" file="Idn Area Cache Command::Command clear cache with force" class="IdnAreaCacheCommandTest" classname="IdnAreaCacheCommandTest" assertions="3" time="0.009794"/>
        <testcase name="Command clear cache without force requires confirmation" file="Idn Area Cache Command::Command clear cache without force requires confirmation" class="IdnAreaCacheCommandTest" classname="IdnAreaCacheCommandTest" assertions="3" time="0.009416"/>
        <testcase name="Command clear cache with confirmation" file="Idn Area Cache Command::Command clear cache with confirmation" class="IdnAreaCacheCommandTest" classname="IdnAreaCacheCommandTest" assertions="3" time="0.009569"/>
        <testcase name="Command clear cache handles failure" file="Idn Area Cache Command::Command clear cache handles failure" class="IdnAreaCacheCommandTest" classname="IdnAreaCacheCommandTest" assertions="0" time="0.017343"/>
        <testcase name="Command warm cache with force" file="Idn Area Cache Command::Command warm cache with force" class="IdnAreaCacheCommandTest" classname="IdnAreaCacheCommandTest" assertions="0" time="0.012247"/>
        <testcase name="Command warm cache without force requires confirmation" file="Idn Area Cache Command::Command warm cache without force requires confirmation" class="IdnAreaCacheCommandTest" classname="IdnAreaCacheCommandTest" assertions="3" time="0.009429"/>
        <testcase name="Command warm cache with confirmation" file="Idn Area Cache Command::Command warm cache with confirmation" class="IdnAreaCacheCommandTest" classname="IdnAreaCacheCommandTest" assertions="1" time="0.010367"/>
        <testcase name="Command warmup alias works" file="Idn Area Cache Command::Command warmup alias works" class="IdnAreaCacheCommandTest" classname="IdnAreaCacheCommandTest" assertions="0" time="0.013016"/>
        <testcase name="Command status shows cache information" file="Idn Area Cache Command::Command status shows cache information" class="IdnAreaCacheCommandTest" classname="IdnAreaCacheCommandTest" assertions="2" time="0.011309"/>
        <testcase name="Command status shows cache testing" file="Idn Area Cache Command::Command status shows cache testing" class="IdnAreaCacheCommandTest" classname="IdnAreaCacheCommandTest" assertions="1" time="0.011078"/>
        <testcase name="Command status shows sample cache status" file="Idn Area Cache Command::Command status shows sample cache status" class="IdnAreaCacheCommandTest" classname="IdnAreaCacheCommandTest" assertions="1" time="0.010730"/>
        <testcase name="Command status shows helpful comments" file="Idn Area Cache Command::Command status shows helpful comments" class="IdnAreaCacheCommandTest" classname="IdnAreaCacheCommandTest" assertions="3" time="0.010433"/>
        <testcase name="Command status handles cache test failure" file="Idn Area Cache Command::Command status handles cache test failure" class="IdnAreaCacheCommandTest" classname="IdnAreaCacheCommandTest" assertions="1" time="0.009570"/>
        <testcase name="Command status detects cache tags support" file="Idn Area Cache Command::Command status detects cache tags support" class="IdnAreaCacheCommandTest" classname="IdnAreaCacheCommandTest" assertions="1" time="0.009394"/>
        <testcase name="Command status handles no cache tags support" file="Idn Area Cache Command::Command status handles no cache tags support" class="IdnAreaCacheCommandTest" classname="IdnAreaCacheCommandTest" assertions="1" time="0.009344"/>
        <testcase name="Command unknown action fails" file="Idn Area Cache Command::Command unknown action fails" class="IdnAreaCacheCommandTest" classname="IdnAreaCacheCommandTest" assertions="3" time="0.009446"/>
        <testcase name="Command handles exception gracefully" file="Idn Area Cache Command::Command handles exception gracefully" class="IdnAreaCacheCommandTest" classname="IdnAreaCacheCommandTest" assertions="1" time="0.010165"/>
        <testcase name="Command cache warming includes major provinces" file="Idn Area Cache Command::Command cache warming includes major provinces" class="IdnAreaCacheCommandTest" classname="IdnAreaCacheCommandTest" assertions="0" time="0.010644"/>
        <testcase name="Command cache warming handles individual failures" file="Idn Area Cache Command::Command cache warming handles individual failures" class="IdnAreaCacheCommandTest" classname="IdnAreaCacheCommandTest" assertions="0" time="0.015697"/>
      </testsuite>
      <testsuite name="IdnAreaCommandTest" file="Idn Area Command" tests="21" assertions="20" errors="0" failures="0" skipped="0" time="2.961307">
        <testcase name="Command signature is correct" file="Idn Area Command::Command signature is correct" class="IdnAreaCommandTest" classname="IdnAreaCommandTest" assertions="5" time="0.011631"/>
        <testcase name="Command description is set" file="Idn Area Command::Command description is set" class="IdnAreaCommandTest" classname="IdnAreaCommandTest" assertions="2" time="0.015787"/>
        <testcase name="Command runs successfully with force flag" file="Idn Area Command::Command runs successfully with force flag" class="IdnAreaCommandTest" classname="IdnAreaCommandTest" assertions="0" time="0.217086"/>
        <testcase name="Command shows header" file="Idn Area Command::Command shows header" class="IdnAreaCommandTest" classname="IdnAreaCommandTest" assertions="0" time="0.197649"/>
        <testcase name="Command validates chunk size" file="Idn Area Command::Command validates chunk size" class="IdnAreaCommandTest" classname="IdnAreaCommandTest" assertions="0" time="0.198013"/>
        <testcase name="Command shows current database state" file="Idn Area Command::Command shows current database state" class="IdnAreaCommandTest" classname="IdnAreaCommandTest" assertions="0" time="0.211023"/>
        <testcase name="Command handles existing data without force" file="Idn Area Command::Command handles existing data without force" class="IdnAreaCommandTest" classname="IdnAreaCommandTest" assertions="4" time="0.010893"/>
        <testcase name="Command continues with existing data when confirmed" file="Idn Area Command::Command continues with existing data when confirmed" class="IdnAreaCommandTest" classname="IdnAreaCommandTest" assertions="3" time="0.011002"/>
        <testcase name="Command with backup option" file="Idn Area Command::Command with backup option" class="IdnAreaCommandTest" classname="IdnAreaCommandTest" assertions="1" time="0.198311"/>
        <testcase name="Command with verify option" file="Idn Area Command::Command with verify option" class="IdnAreaCommandTest" classname="IdnAreaCommandTest" assertions="0" time="0.215731"/>
        <testcase name="Command detects orphaned data" file="Idn Area Command::Command detects orphaned data" class="IdnAreaCommandTest" classname="IdnAreaCommandTest" assertions="0" time="0.207236"/>
        <testcase name="Command with skip cache clear option" file="Idn Area Command::Command with skip cache clear option" class="IdnAreaCommandTest" classname="IdnAreaCommandTest" assertions="0" time="0.203081"/>
        <testcase name="Command clears cache by default" file="Idn Area Command::Command clears cache by default" class="IdnAreaCommandTest" classname="IdnAreaCommandTest" assertions="0" time="0.200767"/>
        <testcase name="Command handles cache clear failure" file="Idn Area Command::Command handles cache clear failure" class="IdnAreaCommandTest" classname="IdnAreaCommandTest" assertions="0" time="0.200889"/>
        <testcase name="Command shows success statistics" file="Idn Area Command::Command shows success statistics" class="IdnAreaCommandTest" classname="IdnAreaCommandTest" assertions="0" time="0.206836"/>
        <testcase name="Command shows helpful comments" file="Idn Area Command::Command shows helpful comments" class="IdnAreaCommandTest" classname="IdnAreaCommandTest" assertions="0" time="0.202537"/>
        <testcase name="Command with only option" file="Idn Area Command::Command with only option" class="IdnAreaCommandTest" classname="IdnAreaCommandTest" assertions="0" time="0.024934"/>
        <testcase name="Command with exclude option" file="Idn Area Command::Command with exclude option" class="IdnAreaCommandTest" classname="IdnAreaCommandTest" assertions="0" time="0.203923"/>
        <testcase name="Command handles exception gracefully" file="Idn Area Command::Command handles exception gracefully" class="IdnAreaCommandTest" classname="IdnAreaCommandTest" assertions="0" time="0.200645"/>
        <testcase name="Command shows verbose error output" file="Idn Area Command::Command shows verbose error output" class="IdnAreaCommandTest" classname="IdnAreaCommandTest" assertions="2" time="0.012740"/>
        <testcase name="Command shows helpful error comments" file="Idn Area Command::Command shows helpful error comments" class="IdnAreaCommandTest" classname="IdnAreaCommandTest" assertions="3" time="0.010592"/>
      </testsuite>
      <testsuite name="IdnAreaSetupCommandTest" file="Idn Area Setup Command" tests="25" assertions="35" errors="0" failures="0" skipped="0" time="0.508437">
        <testcase name="Command signature is correct" file="Idn Area Setup Command::Command signature is correct" class="IdnAreaSetupCommandTest" classname="IdnAreaSetupCommandTest" assertions="8" time="0.008587"/>
        <testcase name="Command description is set" file="Idn Area Setup Command::Command description is set" class="IdnAreaSetupCommandTest" classname="IdnAreaSetupCommandTest" assertions="2" time="0.008528"/>
        <testcase name="Command shows welcome header" file="Idn Area Setup Command::Command shows welcome header" class="IdnAreaSetupCommandTest" classname="IdnAreaSetupCommandTest" assertions="0" time="0.011829"/>
        <testcase name="Command with invalid mode fails" file="Idn Area Setup Command::Command with invalid mode fails" class="IdnAreaSetupCommandTest" classname="IdnAreaSetupCommandTest" assertions="2" time="0.009199"/>
        <testcase name="Command local mode setup" file="Idn Area Setup Command::Command local mode setup" class="IdnAreaSetupCommandTest" classname="IdnAreaSetupCommandTest" assertions="1" time="0.011902"/>
        <testcase name="Command api mode requires credentials" file="Idn Area Setup Command::Command api mode requires credentials" class="IdnAreaSetupCommandTest" classname="IdnAreaSetupCommandTest" assertions="0" time="0.012132"/>
        <testcase name="Command api mode with credentials" file="Idn Area Setup Command::Command api mode with credentials" class="IdnAreaSetupCommandTest" classname="IdnAreaSetupCommandTest" assertions="0" time="0.012325"/>
        <testcase name="Command api mode with invalid token storage" file="Idn Area Setup Command::Command api mode with invalid token storage" class="IdnAreaSetupCommandTest" classname="IdnAreaSetupCommandTest" assertions="2" time="0.012079"/>
        <testcase name="Command api mode with valid token storage" file="Idn Area Setup Command::Command api mode with valid token storage" class="IdnAreaSetupCommandTest" classname="IdnAreaSetupCommandTest" assertions="2" time="0.012816"/>
        <testcase name="Command checks if already setup" file="Idn Area Setup Command::Command checks if already setup" class="IdnAreaSetupCommandTest" classname="IdnAreaSetupCommandTest" assertions="0" time="0.009340"/>
        <testcase name="Command can force reconfigure" file="Idn Area Setup Command::Command can force reconfigure" class="IdnAreaSetupCommandTest" classname="IdnAreaSetupCommandTest" assertions="0" time="0.011828"/>
        <testcase name="Command publishes migrations" file="Idn Area Setup Command::Command publishes migrations" class="IdnAreaSetupCommandTest" classname="IdnAreaSetupCommandTest" assertions="2" time="0.012193"/>
        <testcase name="Command handles migration publishing error" file="Idn Area Setup Command::Command handles migration publishing error" class="IdnAreaSetupCommandTest" classname="IdnAreaSetupCommandTest" assertions="0" time="0.012024"/>
        <testcase name="Command skips migrations when requested" file="Idn Area Setup Command::Command skips migrations when requested" class="IdnAreaSetupCommandTest" classname="IdnAreaSetupCommandTest" assertions="2" time="0.012006"/>
        <testcase name="Command handles migration run error" file="Idn Area Setup Command::Command handles migration run error" class="IdnAreaSetupCommandTest" classname="IdnAreaSetupCommandTest" assertions="1" time="0.013733"/>
        <testcase name="Command local mode shows seeding info" file="Idn Area Setup Command::Command local mode shows seeding info" class="IdnAreaSetupCommandTest" classname="IdnAreaSetupCommandTest" assertions="2" time="0.213963"/>
        <testcase name="Command local mode skips seeding when requested" file="Idn Area Setup Command::Command local mode skips seeding when requested" class="IdnAreaSetupCommandTest" classname="IdnAreaSetupCommandTest" assertions="2" time="0.012336"/>
        <testcase name="Command api mode shows credential setup" file="Idn Area Setup Command::Command api mode shows credential setup" class="IdnAreaSetupCommandTest" classname="IdnAreaSetupCommandTest" assertions="0" time="0.013072"/>
        <testcase name="Command api mode skips connectivity test" file="Idn Area Setup Command::Command api mode skips connectivity test" class="IdnAreaSetupCommandTest" classname="IdnAreaSetupCommandTest" assertions="0" time="0.012754"/>
        <testcase name="Command handles setup exception" file="Idn Area Setup Command::Command handles setup exception" class="IdnAreaSetupCommandTest" classname="IdnAreaSetupCommandTest" assertions="0" time="0.013133"/>
        <testcase name="Command shows appropriate welcome messages" file="Idn Area Setup Command::Command shows appropriate welcome messages" class="IdnAreaSetupCommandTest" classname="IdnAreaSetupCommandTest" assertions="3" time="0.013775"/>
        <testcase name="Command updates configuration" file="Idn Area Setup Command::Command updates configuration" class="IdnAreaSetupCommandTest" classname="IdnAreaSetupCommandTest" assertions="2" time="0.015148"/>
        <testcase name="Command shows final success messages" file="Idn Area Setup Command::Command shows final success messages" class="IdnAreaSetupCommandTest" classname="IdnAreaSetupCommandTest" assertions="2" time="0.016384"/>
        <testcase name="Command api mode shows warnings" file="Idn Area Setup Command::Command api mode shows warnings" class="IdnAreaSetupCommandTest" classname="IdnAreaSetupCommandTest" assertions="0" time="0.014772"/>
        <testcase name="Command local mode shows csv info" file="Idn Area Setup Command::Command local mode shows csv info" class="IdnAreaSetupCommandTest" classname="IdnAreaSetupCommandTest" assertions="2" time="0.012578"/>
      </testsuite>
      <testsuite name="IdnAreaStatsCommandTest" file="Idn Area Stats Command" tests="20" assertions="15" errors="0" failures="0" skipped="0" time="0.251892">
        <testcase name="Command signature is correct" file="Idn Area Stats Command::Command signature is correct" class="IdnAreaStatsCommandTest" classname="IdnAreaStatsCommandTest" assertions="4" time="0.010024"/>
        <testcase name="Command description is set" file="Idn Area Stats Command::Command description is set" class="IdnAreaStatsCommandTest" classname="IdnAreaStatsCommandTest" assertions="1" time="0.009435"/>
        <testcase name="Command shows header" file="Idn Area Stats Command::Command shows header" class="IdnAreaStatsCommandTest" classname="IdnAreaStatsCommandTest" assertions="2" time="0.012374"/>
        <testcase name="Command shows general statistics" file="Idn Area Stats Command::Command shows general statistics" class="IdnAreaStatsCommandTest" classname="IdnAreaStatsCommandTest" assertions="0" time="0.012330"/>
        <testcase name="Command shows largest province info" file="Idn Area Stats Command::Command shows largest province info" class="IdnAreaStatsCommandTest" classname="IdnAreaStatsCommandTest" assertions="0" time="0.013630"/>
        <testcase name="Command shows province specific statistics" file="Idn Area Stats Command::Command shows province specific statistics" class="IdnAreaStatsCommandTest" classname="IdnAreaStatsCommandTest" assertions="0" time="0.012031"/>
        <testcase name="Command handles non existent province" file="Idn Area Stats Command::Command handles non existent province" class="IdnAreaStatsCommandTest" classname="IdnAreaStatsCommandTest" assertions="2" time="0.010373"/>
        <testcase name="Command shows detailed province analysis" file="Idn Area Stats Command::Command shows detailed province analysis" class="IdnAreaStatsCommandTest" classname="IdnAreaStatsCommandTest" assertions="0" time="0.014794"/>
        <testcase name="Command shows detailed general analysis" file="Idn Area Stats Command::Command shows detailed general analysis" class="IdnAreaStatsCommandTest" classname="IdnAreaStatsCommandTest" assertions="0" time="0.013760"/>
        <testcase name="Command shows distribution analysis" file="Idn Area Stats Command::Command shows distribution analysis" class="IdnAreaStatsCommandTest" classname="IdnAreaStatsCommandTest" assertions="0" time="0.018158"/>
        <testcase name="Command detects data quality issues" file="Idn Area Stats Command::Command detects data quality issues" class="IdnAreaStatsCommandTest" classname="IdnAreaStatsCommandTest" assertions="0" time="0.016228"/>
        <testcase name="Command shows no quality issues when clean" file="Idn Area Stats Command::Command shows no quality issues when clean" class="IdnAreaStatsCommandTest" classname="IdnAreaStatsCommandTest" assertions="0" time="0.013639"/>
        <testcase name="Command detects empty regency names" file="Idn Area Stats Command::Command detects empty regency names" class="IdnAreaStatsCommandTest" classname="IdnAreaStatsCommandTest" assertions="0" time="0.013728"/>
        <testcase name="Command handles exception gracefully" file="Idn Area Stats Command::Command handles exception gracefully" class="IdnAreaStatsCommandTest" classname="IdnAreaStatsCommandTest" assertions="0" time="0.013002"/>
        <testcase name="Command shows statistics with averages" file="Idn Area Stats Command::Command shows statistics with averages" class="IdnAreaStatsCommandTest" classname="IdnAreaStatsCommandTest" assertions="2" time="0.012126"/>
        <testcase name="Command format option is accepted" file="Idn Area Stats Command::Command format option is accepted" class="IdnAreaStatsCommandTest" classname="IdnAreaStatsCommandTest" assertions="1" time="0.012423"/>
        <testcase name="Command format csv is accepted" file="Idn Area Stats Command::Command format csv is accepted" class="IdnAreaStatsCommandTest" classname="IdnAreaStatsCommandTest" assertions="1" time="0.011387"/>
        <testcase name="Command detailed province without regencies" file="Idn Area Stats Command::Command detailed province without regencies" class="IdnAreaStatsCommandTest" classname="IdnAreaStatsCommandTest" assertions="2" time="0.010711"/>
        <testcase name="Command shows numbered statistics correctly" file="Idn Area Stats Command::Command shows numbered statistics correctly" class="IdnAreaStatsCommandTest" classname="IdnAreaStatsCommandTest" assertions="0" time="0.011056"/>
        <testcase name="Command handles province with zero counts" file="Idn Area Stats Command::Command handles province with zero counts" class="IdnAreaStatsCommandTest" classname="IdnAreaStatsCommandTest" assertions="0" time="0.010684"/>
      </testsuite>
      <testsuite name="IdnAreaSwitchModeCommandTest" file="Idn Area Switch Mode Command" tests="30" assertions="23" errors="0" failures="0" skipped="0" time="0.326463">
        <testcase name="Command signature is correct" file="Idn Area Switch Mode Command::Command signature is correct" class="IdnAreaSwitchModeCommandTest" classname="IdnAreaSwitchModeCommandTest" assertions="8" time="0.008449"/>
        <testcase name="Command description is set" file="Idn Area Switch Mode Command::Command description is set" class="IdnAreaSwitchModeCommandTest" classname="IdnAreaSwitchModeCommandTest" assertions="1" time="0.008311"/>
        <testcase name="Command shows welcome header" file="Idn Area Switch Mode Command::Command shows welcome header" class="IdnAreaSwitchModeCommandTest" classname="IdnAreaSwitchModeCommandTest" assertions="0" time="0.009367"/>
        <testcase name="Command shows current mode" file="Idn Area Switch Mode Command::Command shows current mode" class="IdnAreaSwitchModeCommandTest" classname="IdnAreaSwitchModeCommandTest" assertions="2" time="0.010806"/>
        <testcase name="Command with invalid mode fails" file="Idn Area Switch Mode Command::Command with invalid mode fails" class="IdnAreaSwitchModeCommandTest" classname="IdnAreaSwitchModeCommandTest" assertions="2" time="0.009684"/>
        <testcase name="Command same mode exits early" file="Idn Area Switch Mode Command::Command same mode exits early" class="IdnAreaSwitchModeCommandTest" classname="IdnAreaSwitchModeCommandTest" assertions="2" time="0.009360"/>
        <testcase name="Command switch to api mode" file="Idn Area Switch Mode Command::Command switch to api mode" class="IdnAreaSwitchModeCommandTest" classname="IdnAreaSwitchModeCommandTest" assertions="0" time="0.009776"/>
        <testcase name="Command switch to local mode" file="Idn Area Switch Mode Command::Command switch to local mode" class="IdnAreaSwitchModeCommandTest" classname="IdnAreaSwitchModeCommandTest" assertions="0" time="0.009402"/>
        <testcase name="Command without force requires confirmation" file="Idn Area Switch Mode Command::Command without force requires confirmation" class="IdnAreaSwitchModeCommandTest" classname="IdnAreaSwitchModeCommandTest" assertions="3" time="0.010325"/>
        <testcase name="Command with confirmation proceeds" file="Idn Area Switch Mode Command::Command with confirmation proceeds" class="IdnAreaSwitchModeCommandTest" classname="IdnAreaSwitchModeCommandTest" assertions="0" time="0.010464"/>
        <testcase name="Command api mode shows warnings" file="Idn Area Switch Mode Command::Command api mode shows warnings" class="IdnAreaSwitchModeCommandTest" classname="IdnAreaSwitchModeCommandTest" assertions="0" time="0.010388"/>
        <testcase name="Command local mode shows benefits" file="Idn Area Switch Mode Command::Command local mode shows benefits" class="IdnAreaSwitchModeCommandTest" classname="IdnAreaSwitchModeCommandTest" assertions="0" time="0.014068"/>
        <testcase name="Command local mode without data shows warning" file="Idn Area Switch Mode Command::Command local mode without data shows warning" class="IdnAreaSwitchModeCommandTest" classname="IdnAreaSwitchModeCommandTest" assertions="0" time="0.010699"/>
        <testcase name="Command validates prerequisites for api mode" file="Idn Area Switch Mode Command::Command validates prerequisites for api mode" class="IdnAreaSwitchModeCommandTest" classname="IdnAreaSwitchModeCommandTest" assertions="0" time="0.009817"/>
        <testcase name="Command validates prerequisites for local mode" file="Idn Area Switch Mode Command::Command validates prerequisites for local mode" class="IdnAreaSwitchModeCommandTest" classname="IdnAreaSwitchModeCommandTest" assertions="0" time="0.011954"/>
        <testcase name="Command skips validation when requested" file="Idn Area Switch Mode Command::Command skips validation when requested" class="IdnAreaSwitchModeCommandTest" classname="IdnAreaSwitchModeCommandTest" assertions="2" time="0.010787"/>
        <testcase name="Command checks database migrations" file="Idn Area Switch Mode Command::Command checks database migrations" class="IdnAreaSwitchModeCommandTest" classname="IdnAreaSwitchModeCommandTest" assertions="0" time="0.010271"/>
        <testcase name="Command skips migration when requested" file="Idn Area Switch Mode Command::Command skips migration when requested" class="IdnAreaSwitchModeCommandTest" classname="IdnAreaSwitchModeCommandTest" assertions="2" time="0.010914"/>
        <testcase name="Command updates configuration" file="Idn Area Switch Mode Command::Command updates configuration" class="IdnAreaSwitchModeCommandTest" classname="IdnAreaSwitchModeCommandTest" assertions="0" time="0.011121"/>
        <testcase name="Command handles missing config file" file="Idn Area Switch Mode Command::Command handles missing config file" class="IdnAreaSwitchModeCommandTest" classname="IdnAreaSwitchModeCommandTest" assertions="0" time="0.010481"/>
        <testcase name="Command handles missing env file" file="Idn Area Switch Mode Command::Command handles missing env file" class="IdnAreaSwitchModeCommandTest" classname="IdnAreaSwitchModeCommandTest" assertions="0" time="0.010953"/>
        <testcase name="Command api mode requires credentials" file="Idn Area Switch Mode Command::Command api mode requires credentials" class="IdnAreaSwitchModeCommandTest" classname="IdnAreaSwitchModeCommandTest" assertions="0" time="0.018743"/>
        <testcase name="Command local mode validates database" file="Idn Area Switch Mode Command::Command local mode validates database" class="IdnAreaSwitchModeCommandTest" classname="IdnAreaSwitchModeCommandTest" assertions="0" time="0.010836"/>
        <testcase name="Command local mode checks data files" file="Idn Area Switch Mode Command::Command local mode checks data files" class="IdnAreaSwitchModeCommandTest" classname="IdnAreaSwitchModeCommandTest" assertions="0" time="0.011500"/>
        <testcase name="Command handles local mode data seeding" file="Idn Area Switch Mode Command::Command handles local mode data seeding" class="IdnAreaSwitchModeCommandTest" classname="IdnAreaSwitchModeCommandTest" assertions="0" time="0.012287"/>
        <testcase name="Command skips seeding when requested" file="Idn Area Switch Mode Command::Command skips seeding when requested" class="IdnAreaSwitchModeCommandTest" classname="IdnAreaSwitchModeCommandTest" assertions="0" time="0.011510"/>
        <testcase name="Command handles exception during switch" file="Idn Area Switch Mode Command::Command handles exception during switch" class="IdnAreaSwitchModeCommandTest" classname="IdnAreaSwitchModeCommandTest" assertions="1" time="0.011795"/>
        <testcase name="Command shows data counts for existing local data" file="Idn Area Switch Mode Command::Command shows data counts for existing local data" class="IdnAreaSwitchModeCommandTest" classname="IdnAreaSwitchModeCommandTest" assertions="0" time="0.010889"/>
        <testcase name="Command detects incomplete local data" file="Idn Area Switch Mode Command::Command detects incomplete local data" class="IdnAreaSwitchModeCommandTest" classname="IdnAreaSwitchModeCommandTest" assertions="0" time="0.011168"/>
        <testcase name="Command api mode with invalid token storage" file="Idn Area Switch Mode Command::Command api mode with invalid token storage" class="IdnAreaSwitchModeCommandTest" classname="IdnAreaSwitchModeCommandTest" assertions="0" time="0.010340"/>
      </testsuite>
      <testsuite name="Tests\Unit\DistrictAttributesTest" file="tests/Unit/DistrictAttributesTest.php" tests="12" assertions="21" errors="0" failures="0" skipped="0" time="0.057136">
        <testcase name="`District Attributes` → it gets formatted name attribute" file="tests/Unit/DistrictAttributesTest.php::`District Attributes` → it gets formatted name attribute" class="Tests\Unit\DistrictAttributesTest" classname="Tests.Unit.DistrictAttributesTest" assertions="1" time="0.004998"/>
        <testcase name="`District Attributes` → it gets full formatted name attribute" file="tests/Unit/DistrictAttributesTest.php::`District Attributes` → it gets full formatted name attribute" class="Tests\Unit\DistrictAttributesTest" classname="Tests.Unit.DistrictAttributesTest" assertions="1" time="0.004256"/>
        <testcase name="`District Attributes` → it uses code as route key" file="tests/Unit/DistrictAttributesTest.php::`District Attributes` → it uses code as route key" class="Tests\Unit\DistrictAttributesTest" classname="Tests.Unit.DistrictAttributesTest" assertions="1" time="0.004630"/>
        <testcase name="`District Static Methods` → it can find by code static method" file="tests/Unit/DistrictAttributesTest.php::`District Static Methods` → it can find by code static method" class="Tests\Unit\DistrictAttributesTest" classname="Tests.Unit.DistrictAttributesTest" assertions="3" time="0.005282"/>
        <testcase name="`District Static Methods` → it can search by name static method" file="tests/Unit/DistrictAttributesTest.php::`District Static Methods` → it can search by name static method" class="Tests\Unit\DistrictAttributesTest" classname="Tests.Unit.DistrictAttributesTest" assertions="3" time="0.004824"/>
        <testcase name="`District Static Methods` → it can get districts by regency static method" file="tests/Unit/DistrictAttributesTest.php::`District Static Methods` → it can get districts by regency static method" class="Tests\Unit\DistrictAttributesTest" classname="Tests.Unit.DistrictAttributesTest" assertions="2" time="0.004600"/>
        <testcase name="`District Scopes` → it can scope search districts" file="tests/Unit/DistrictAttributesTest.php::`District Scopes` → it can scope search districts" class="Tests\Unit\DistrictAttributesTest" classname="Tests.Unit.DistrictAttributesTest" assertions="2" time="0.004985"/>
        <testcase name="`District Scopes` → it can scope districts in regency" file="tests/Unit/DistrictAttributesTest.php::`District Scopes` → it can scope districts in regency" class="Tests\Unit\DistrictAttributesTest" classname="Tests.Unit.DistrictAttributesTest" assertions="1" time="0.004458"/>
        <testcase name="`District Scopes` → it can scope districts in province" file="tests/Unit/DistrictAttributesTest.php::`District Scopes` → it can scope districts in province" class="Tests\Unit\DistrictAttributesTest" classname="Tests.Unit.DistrictAttributesTest" assertions="1" time="0.004309"/>
        <testcase name="`District Scopes` → it can scope with village count" file="tests/Unit/DistrictAttributesTest.php::`District Scopes` → it can scope with village count" class="Tests\Unit\DistrictAttributesTest" classname="Tests.Unit.DistrictAttributesTest" assertions="1" time="0.005180"/>
        <testcase name="`District Relationships` → it has regency relationship" file="tests/Unit/DistrictAttributesTest.php::`District Relationships` → it has regency relationship" class="Tests\Unit\DistrictAttributesTest" classname="Tests.Unit.DistrictAttributesTest" assertions="2" time="0.005209"/>
        <testcase name="`District Relationships` → it has villages relationship" file="tests/Unit/DistrictAttributesTest.php::`District Relationships` → it has villages relationship" class="Tests\Unit\DistrictAttributesTest" classname="Tests.Unit.DistrictAttributesTest" assertions="3" time="0.004404"/>
      </testsuite>
      <testsuite name="Tests\Unit\IdnAreaExtendedTest" file="tests/Unit/IdnAreaExtendedTest.php" tests="14" assertions="52" errors="0" failures="0" skipped="0" time="0.080315">
        <testcase name="`IdnArea Extended Methods` → it can get mode" file="tests/Unit/IdnAreaExtendedTest.php::`IdnArea Extended Methods` → it can get mode" class="Tests\Unit\IdnAreaExtendedTest" classname="Tests.Unit.IdnAreaExtendedTest" assertions="1" time="0.005386"/>
        <testcase name="`IdnArea Extended Methods` → it can check if API is available" file="tests/Unit/IdnAreaExtendedTest.php::`IdnArea Extended Methods` → it can check if API is available" class="Tests\Unit\IdnAreaExtendedTest" classname="Tests.Unit.IdnAreaExtendedTest" assertions="1" time="0.004994"/>
        <testcase name="`IdnArea Extended Methods` → it can get periods" file="tests/Unit/IdnAreaExtendedTest.php::`IdnArea Extended Methods` → it can get periods" class="Tests\Unit\IdnAreaExtendedTest" classname="Tests.Unit.IdnAreaExtendedTest" assertions="1" time="0.004094"/>
        <testcase name="`IdnArea Extended Methods` → it can clear cache" file="tests/Unit/IdnAreaExtendedTest.php::`IdnArea Extended Methods` → it can clear cache" class="Tests\Unit\IdnAreaExtendedTest" classname="Tests.Unit.IdnAreaExtendedTest" assertions="1" time="0.004866"/>
        <testcase name="`IdnArea Extended Methods` → it can get hierarchy" file="tests/Unit/IdnAreaExtendedTest.php::`IdnArea Extended Methods` → it can get hierarchy" class="Tests\Unit\IdnAreaExtendedTest" classname="Tests.Unit.IdnAreaExtendedTest" assertions="14" time="0.005913"/>
        <testcase name="`IdnArea Extended Methods` → it can get multiple areas by codes" file="tests/Unit/IdnAreaExtendedTest.php::`IdnArea Extended Methods` → it can get multiple areas by codes" class="Tests\Unit\IdnAreaExtendedTest" classname="Tests.Unit.IdnAreaExtendedTest" assertions="6" time="0.004501"/>
        <testcase name="`IdnArea Extended Methods` → it can get multiple areas with specific type" file="tests/Unit/IdnAreaExtendedTest.php::`IdnArea Extended Methods` → it can get multiple areas with specific type" class="Tests\Unit\IdnAreaExtendedTest" classname="Tests.Unit.IdnAreaExtendedTest" assertions="4" time="0.004173"/>
        <testcase name="`IdnArea Extended Methods` → it handles non-existent codes in multiple" file="tests/Unit/IdnAreaExtendedTest.php::`IdnArea Extended Methods` → it handles non-existent codes in multiple" class="Tests\Unit\IdnAreaExtendedTest" classname="Tests.Unit.IdnAreaExtendedTest" assertions="1" time="0.004075"/>
        <testcase name="`IdnArea Extended Methods` → it handles empty hierarchy" file="tests/Unit/IdnAreaExtendedTest.php::`IdnArea Extended Methods` → it handles empty hierarchy" class="Tests\Unit\IdnAreaExtendedTest" classname="Tests.Unit.IdnAreaExtendedTest" assertions="2" time="0.005417"/>
        <testcase name="`IdnArea Extended Methods` → it can handle different config" file="tests/Unit/IdnAreaExtendedTest.php::`IdnArea Extended Methods` → it can handle different config" class="Tests\Unit\IdnAreaExtendedTest" classname="Tests.Unit.IdnAreaExtendedTest" assertions="1" time="0.004917"/>
        <testcase name="`IdnArea Extended Methods` → it can get all data types" file="tests/Unit/IdnAreaExtendedTest.php::`IdnArea Extended Methods` → it can get all data types" class="Tests\Unit\IdnAreaExtendedTest" classname="Tests.Unit.IdnAreaExtendedTest" assertions="4" time="0.006622"/>
        <testcase name="`IdnArea Extended Methods` → it can get specific items" file="tests/Unit/IdnAreaExtendedTest.php::`IdnArea Extended Methods` → it can get specific items" class="Tests\Unit\IdnAreaExtendedTest" classname="Tests.Unit.IdnAreaExtendedTest" assertions="4" time="0.007944"/>
        <testcase name="`IdnArea Extended Methods` → it can get related data" file="tests/Unit/IdnAreaExtendedTest.php::`IdnArea Extended Methods` → it can get related data" class="Tests\Unit\IdnAreaExtendedTest" classname="Tests.Unit.IdnAreaExtendedTest" assertions="3" time="0.010042"/>
        <testcase name="`IdnArea Extended Methods` → it can search different types" file="tests/Unit/IdnAreaExtendedTest.php::`IdnArea Extended Methods` → it can search different types" class="Tests\Unit\IdnAreaExtendedTest" classname="Tests.Unit.IdnAreaExtendedTest" assertions="9" time="0.007373"/>
      </testsuite>
      <testsuite name="Tests\Unit\IdnAreaManagerExtendedTest" file="tests/Unit/IdnAreaManagerExtendedTest.php" tests="16" assertions="38" errors="0" failures="0" skipped="0" time="0.171102">
        <testcase name="`IdnAreaManager Extended Methods` → it can get periods" file="tests/Unit/IdnAreaManagerExtendedTest.php::`IdnAreaManager Extended Methods` → it can get periods" class="Tests\Unit\IdnAreaManagerExtendedTest" classname="Tests.Unit.IdnAreaManagerExtendedTest" assertions="1" time="0.007513"/>
        <testcase name="`IdnAreaManager Extended Methods` → it can clear cache" file="tests/Unit/IdnAreaManagerExtendedTest.php::`IdnAreaManager Extended Methods` → it can clear cache" class="Tests\Unit\IdnAreaManagerExtendedTest" classname="Tests.Unit.IdnAreaManagerExtendedTest" assertions="1" time="0.005477"/>
        <testcase name="`IdnAreaManager Extended Methods` → it can get mode information" file="tests/Unit/IdnAreaManagerExtendedTest.php::`IdnAreaManager Extended Methods` → it can get mode information" class="Tests\Unit\IdnAreaManagerExtendedTest" classname="Tests.Unit.IdnAreaManagerExtendedTest" assertions="2" time="0.008343"/>
        <testcase name="`IdnAreaManager Extended Methods` → it can check if API is available" file="tests/Unit/IdnAreaManagerExtendedTest.php::`IdnAreaManager Extended Methods` → it can check if API is available" class="Tests\Unit\IdnAreaManagerExtendedTest" classname="Tests.Unit.IdnAreaManagerExtendedTest" assertions="1" time="0.041622"/>
        <testcase name="`IdnAreaManager Extended Methods` → it can get statistics" file="tests/Unit/IdnAreaManagerExtendedTest.php::`IdnAreaManager Extended Methods` → it can get statistics" class="Tests\Unit\IdnAreaManagerExtendedTest" classname="Tests.Unit.IdnAreaManagerExtendedTest" assertions="9" time="0.013355"/>
        <testcase name="`IdnAreaManager Extended Methods` → it can search provinces" file="tests/Unit/IdnAreaManagerExtendedTest.php::`IdnAreaManager Extended Methods` → it can search provinces" class="Tests\Unit\IdnAreaManagerExtendedTest" classname="Tests.Unit.IdnAreaManagerExtendedTest" assertions="2" time="0.011217"/>
        <testcase name="`IdnAreaManager Extended Methods` → it can search regencies" file="tests/Unit/IdnAreaManagerExtendedTest.php::`IdnAreaManager Extended Methods` → it can search regencies" class="Tests\Unit\IdnAreaManagerExtendedTest" classname="Tests.Unit.IdnAreaManagerExtendedTest" assertions="2" time="0.005507"/>
        <testcase name="`IdnAreaManager Extended Methods` → it can search districts" file="tests/Unit/IdnAreaManagerExtendedTest.php::`IdnAreaManager Extended Methods` → it can search districts" class="Tests\Unit\IdnAreaManagerExtendedTest" classname="Tests.Unit.IdnAreaManagerExtendedTest" assertions="2" time="0.010708"/>
        <testcase name="`IdnAreaManager Extended Methods` → it can search villages" file="tests/Unit/IdnAreaManagerExtendedTest.php::`IdnAreaManager Extended Methods` → it can search villages" class="Tests\Unit\IdnAreaManagerExtendedTest" classname="Tests.Unit.IdnAreaManagerExtendedTest" assertions="2" time="0.011341"/>
        <testcase name="`IdnAreaManager Extended Methods` → it can get current service" file="tests/Unit/IdnAreaManagerExtendedTest.php::`IdnAreaManager Extended Methods` → it can get current service" class="Tests\Unit\IdnAreaManagerExtendedTest" classname="Tests.Unit.IdnAreaManagerExtendedTest" assertions="1" time="0.005986"/>
        <testcase name="`IdnAreaManager Extended Methods` → it can get current mode" file="tests/Unit/IdnAreaManagerExtendedTest.php::`IdnAreaManager Extended Methods` → it can get current mode" class="Tests\Unit\IdnAreaManagerExtendedTest" classname="Tests.Unit.IdnAreaManagerExtendedTest" assertions="1" time="0.004540"/>
        <testcase name="`IdnAreaManager Extended Methods` → it can check if service is available" file="tests/Unit/IdnAreaManagerExtendedTest.php::`IdnAreaManager Extended Methods` → it can check if service is available" class="Tests\Unit\IdnAreaManagerExtendedTest" classname="Tests.Unit.IdnAreaManagerExtendedTest" assertions="1" time="0.004630"/>
        <testcase name="`IdnAreaManager Extended Methods` → it handles different config values" file="tests/Unit/IdnAreaManagerExtendedTest.php::`IdnAreaManager Extended Methods` → it handles different config values" class="Tests\Unit\IdnAreaManagerExtendedTest" classname="Tests.Unit.IdnAreaManagerExtendedTest" assertions="2" time="0.005079"/>
        <testcase name="`IdnAreaManager Extended Methods` → it can get all data methods with caching" file="tests/Unit/IdnAreaManagerExtendedTest.php::`IdnAreaManager Extended Methods` → it can get all data methods with caching" class="Tests\Unit\IdnAreaManagerExtendedTest" classname="Tests.Unit.IdnAreaManagerExtendedTest" assertions="4" time="0.005850"/>
        <testcase name="`IdnAreaManager Extended Methods` → it can get individual items" file="tests/Unit/IdnAreaManagerExtendedTest.php::`IdnAreaManager Extended Methods` → it can get individual items" class="Tests\Unit\IdnAreaManagerExtendedTest" classname="Tests.Unit.IdnAreaManagerExtendedTest" assertions="4" time="0.011386"/>
        <testcase name="`IdnAreaManager Extended Methods` → it can get related data" file="tests/Unit/IdnAreaManagerExtendedTest.php::`IdnAreaManager Extended Methods` → it can get related data" class="Tests\Unit\IdnAreaManagerExtendedTest" classname="Tests.Unit.IdnAreaManagerExtendedTest" assertions="3" time="0.018549"/>
      </testsuite>
      <testsuite name="Tests\Unit\IdnAreaManagerTest" file="tests/Unit/IdnAreaManagerTest.php" tests="13" assertions="47" errors="0" failures="0" skipped="0" time="0.108041">
        <testcase name="it uses local service when in local mode" file="tests/Unit/IdnAreaManagerTest.php::it uses local service when in local mode" class="Tests\Unit\IdnAreaManagerTest" classname="Tests.Unit.IdnAreaManagerTest" assertions="3" time="0.006333"/>
        <testcase name="it uses API service when in API mode" file="tests/Unit/IdnAreaManagerTest.php::it uses API service when in API mode" class="Tests\Unit\IdnAreaManagerTest" classname="Tests.Unit.IdnAreaManagerTest" assertions="2" time="0.033880"/>
        <testcase name="it defaults to local mode when mode is not configured" file="tests/Unit/IdnAreaManagerTest.php::it defaults to local mode when mode is not configured" class="Tests\Unit\IdnAreaManagerTest" classname="Tests.Unit.IdnAreaManagerTest" assertions="3" time="0.007927"/>
        <testcase name="it can get regencies by province code in local mode" file="tests/Unit/IdnAreaManagerTest.php::it can get regencies by province code in local mode" class="Tests\Unit\IdnAreaManagerTest" classname="Tests.Unit.IdnAreaManagerTest" assertions="3" time="0.005562"/>
        <testcase name="it can get regencies by province code in API mode" file="tests/Unit/IdnAreaManagerTest.php::it can get regencies by province code in API mode" class="Tests\Unit\IdnAreaManagerTest" classname="Tests.Unit.IdnAreaManagerTest" assertions="2" time="0.006823"/>
        <testcase name="it can get districts by regency code in both modes" file="tests/Unit/IdnAreaManagerTest.php::it can get districts by regency code in both modes" class="Tests\Unit\IdnAreaManagerTest" classname="Tests.Unit.IdnAreaManagerTest" assertions="5" time="0.005057"/>
        <testcase name="it can get villages by district code in both modes" file="tests/Unit/IdnAreaManagerTest.php::it can get villages by district code in both modes" class="Tests\Unit\IdnAreaManagerTest" classname="Tests.Unit.IdnAreaManagerTest" assertions="5" time="0.005524"/>
        <testcase name="it can find by code in local mode" file="tests/Unit/IdnAreaManagerTest.php::it can find by code in local mode" class="Tests\Unit\IdnAreaManagerTest" classname="Tests.Unit.IdnAreaManagerTest" assertions="8" time="0.007264"/>
        <testcase name="it can search by name in local mode" file="tests/Unit/IdnAreaManagerTest.php::it can search by name in local mode" class="Tests\Unit\IdnAreaManagerTest" classname="Tests.Unit.IdnAreaManagerTest" assertions="8" time="0.005208"/>
        <testcase name="it handles configuration changes dynamically" file="tests/Unit/IdnAreaManagerTest.php::it handles configuration changes dynamically" class="Tests\Unit\IdnAreaManagerTest" classname="Tests.Unit.IdnAreaManagerTest" assertions="3" time="0.006751"/>
        <testcase name="it maintains service instances correctly" file="tests/Unit/IdnAreaManagerTest.php::it maintains service instances correctly" class="Tests\Unit\IdnAreaManagerTest" classname="Tests.Unit.IdnAreaManagerTest" assertions="1" time="0.005549"/>
        <testcase name="it can get current mode" file="tests/Unit/IdnAreaManagerTest.php::it can get current mode" class="Tests\Unit\IdnAreaManagerTest" classname="Tests.Unit.IdnAreaManagerTest" assertions="2" time="0.005227"/>
        <testcase name="it validates service availability" file="tests/Unit/IdnAreaManagerTest.php::it validates service availability" class="Tests\Unit\IdnAreaManagerTest" classname="Tests.Unit.IdnAreaManagerTest" assertions="2" time="0.006935"/>
      </testsuite>
      <testsuite name="Tests\Unit\IdnAreaTest" file="tests/Unit/IdnAreaTest.php" tests="15" assertions="47" errors="0" failures="0" skipped="0" time="0.116378">
        <testcase name="it can get all provinces" file="tests/Unit/IdnAreaTest.php::it can get all provinces" class="Tests\Unit\IdnAreaTest" classname="Tests.Unit.IdnAreaTest" assertions="3" time="0.015086"/>
        <testcase name="it can get a province by code" file="tests/Unit/IdnAreaTest.php::it can get a province by code" class="Tests\Unit\IdnAreaTest" classname="Tests.Unit.IdnAreaTest" assertions="3" time="0.005203"/>
        <testcase name="it returns null for non-existent province" file="tests/Unit/IdnAreaTest.php::it returns null for non-existent province" class="Tests\Unit\IdnAreaTest" classname="Tests.Unit.IdnAreaTest" assertions="1" time="0.005486"/>
        <testcase name="it can get regencies by province" file="tests/Unit/IdnAreaTest.php::it can get regencies by province" class="Tests\Unit\IdnAreaTest" classname="Tests.Unit.IdnAreaTest" assertions="3" time="0.009298"/>
        <testcase name="it can get districts by regency" file="tests/Unit/IdnAreaTest.php::it can get districts by regency" class="Tests\Unit\IdnAreaTest" classname="Tests.Unit.IdnAreaTest" assertions="3" time="0.006574"/>
        <testcase name="it can get all districts by regency" file="tests/Unit/IdnAreaTest.php::it can get all districts by regency" class="Tests\Unit\IdnAreaTest" classname="Tests.Unit.IdnAreaTest" assertions="1" time="0.008852"/>
        <testcase name="it can get villages by district" file="tests/Unit/IdnAreaTest.php::it can get villages by district" class="Tests\Unit\IdnAreaTest" classname="Tests.Unit.IdnAreaTest" assertions="3" time="0.007029"/>
        <testcase name="it can search areas" file="tests/Unit/IdnAreaTest.php::it can search areas" class="Tests\Unit\IdnAreaTest" classname="Tests.Unit.IdnAreaTest" assertions="3" time="0.005989"/>
        <testcase name="it can search with partial match" file="tests/Unit/IdnAreaTest.php::it can search with partial match" class="Tests\Unit\IdnAreaTest" classname="Tests.Unit.IdnAreaTest" assertions="2" time="0.004814"/>
        <testcase name="it can get hierarchy" file="tests/Unit/IdnAreaTest.php::it can get hierarchy" class="Tests\Unit\IdnAreaTest" classname="Tests.Unit.IdnAreaTest" assertions="5" time="0.006173"/>
        <testcase name="it can get statistics" file="tests/Unit/IdnAreaTest.php::it can get statistics" class="Tests\Unit\IdnAreaTest" classname="Tests.Unit.IdnAreaTest" assertions="9" time="0.006529"/>
        <testcase name="it can get multiple areas by codes" file="tests/Unit/IdnAreaTest.php::it can get multiple areas by codes" class="Tests\Unit\IdnAreaTest" classname="Tests.Unit.IdnAreaTest" assertions="3" time="0.007131"/>
        <testcase name="it can clear cache" file="tests/Unit/IdnAreaTest.php::it can clear cache" class="Tests\Unit\IdnAreaTest" classname="Tests.Unit.IdnAreaTest" assertions="1" time="0.012523"/>
        <testcase name="it handles empty search results gracefully" file="tests/Unit/IdnAreaTest.php::it handles empty search results gracefully" class="Tests\Unit\IdnAreaTest" classname="Tests.Unit.IdnAreaTest" assertions="5" time="0.005991"/>
        <testcase name="it returns empty array for non-existent province hierarchy" file="tests/Unit/IdnAreaTest.php::it returns empty array for non-existent province hierarchy" class="Tests\Unit\IdnAreaTest" classname="Tests.Unit.IdnAreaTest" assertions="2" time="0.009701"/>
      </testsuite>
      <testsuite name="Tests\Unit\LocalDataServiceTest" file="tests/Unit/LocalDataServiceTest.php" tests="18" assertions="45" errors="0" failures="0" skipped="0" time="0.127965">
        <testcase name="it can get all provinces" file="tests/Unit/LocalDataServiceTest.php::it can get all provinces" class="Tests\Unit\LocalDataServiceTest" classname="Tests.Unit.LocalDataServiceTest" assertions="5" time="0.011067"/>
        <testcase name="it can get regencies by province code" file="tests/Unit/LocalDataServiceTest.php::it can get regencies by province code" class="Tests\Unit\LocalDataServiceTest" classname="Tests.Unit.LocalDataServiceTest" assertions="3" time="0.011149"/>
        <testcase name="it can get districts by regency code" file="tests/Unit/LocalDataServiceTest.php::it can get districts by regency code" class="Tests\Unit\LocalDataServiceTest" classname="Tests.Unit.LocalDataServiceTest" assertions="3" time="0.005958"/>
        <testcase name="it can get villages by district code" file="tests/Unit/LocalDataServiceTest.php::it can get villages by district code" class="Tests\Unit\LocalDataServiceTest" classname="Tests.Unit.LocalDataServiceTest" assertions="3" time="0.007018"/>
        <testcase name="it returns empty array for non-existent province" file="tests/Unit/LocalDataServiceTest.php::it returns empty array for non-existent province" class="Tests\Unit\LocalDataServiceTest" classname="Tests.Unit.LocalDataServiceTest" assertions="2" time="0.013444"/>
        <testcase name="it can get province by code" file="tests/Unit/LocalDataServiceTest.php::it can get province by code" class="Tests\Unit\LocalDataServiceTest" classname="Tests.Unit.LocalDataServiceTest" assertions="2" time="0.008882"/>
        <testcase name="it can get regency by code" file="tests/Unit/LocalDataServiceTest.php::it can get regency by code" class="Tests\Unit\LocalDataServiceTest" classname="Tests.Unit.LocalDataServiceTest" assertions="2" time="0.008455"/>
        <testcase name="it can get district by code" file="tests/Unit/LocalDataServiceTest.php::it can get district by code" class="Tests\Unit\LocalDataServiceTest" classname="Tests.Unit.LocalDataServiceTest" assertions="2" time="0.007000"/>
        <testcase name="it can get village by code" file="tests/Unit/LocalDataServiceTest.php::it can get village by code" class="Tests\Unit\LocalDataServiceTest" classname="Tests.Unit.LocalDataServiceTest" assertions="2" time="0.005635"/>
        <testcase name="it returns null for non-existent codes" file="tests/Unit/LocalDataServiceTest.php::it returns null for non-existent codes" class="Tests\Unit\LocalDataServiceTest" classname="Tests.Unit.LocalDataServiceTest" assertions="4" time="0.004956"/>
        <testcase name="it can search provinces by name" file="tests/Unit/LocalDataServiceTest.php::it can search provinces by name" class="Tests\Unit\LocalDataServiceTest" classname="Tests.Unit.LocalDataServiceTest" assertions="2" time="0.007444"/>
        <testcase name="it can search regencies by name" file="tests/Unit/LocalDataServiceTest.php::it can search regencies by name" class="Tests\Unit\LocalDataServiceTest" classname="Tests.Unit.LocalDataServiceTest" assertions="2" time="0.007327"/>
        <testcase name="it can search districts by name" file="tests/Unit/LocalDataServiceTest.php::it can search districts by name" class="Tests\Unit\LocalDataServiceTest" classname="Tests.Unit.LocalDataServiceTest" assertions="2" time="0.004661"/>
        <testcase name="it can search villages by name" file="tests/Unit/LocalDataServiceTest.php::it can search villages by name" class="Tests\Unit\LocalDataServiceTest" classname="Tests.Unit.LocalDataServiceTest" assertions="2" time="0.005614"/>
        <testcase name="it handles case insensitive search" file="tests/Unit/LocalDataServiceTest.php::it handles case insensitive search" class="Tests\Unit\LocalDataServiceTest" classname="Tests.Unit.LocalDataServiceTest" assertions="2" time="0.004703"/>
        <testcase name="it handles partial name search" file="tests/Unit/LocalDataServiceTest.php::it handles partial name search" class="Tests\Unit\LocalDataServiceTest" classname="Tests.Unit.LocalDataServiceTest" assertions="2" time="0.004256"/>
        <testcase name="it returns paginated results when requested" file="tests/Unit/LocalDataServiceTest.php::it returns paginated results when requested" class="Tests\Unit\LocalDataServiceTest" classname="Tests.Unit.LocalDataServiceTest" assertions="1" time="0.005419"/>
        <testcase name="it can count total records" file="tests/Unit/LocalDataServiceTest.php::it can count total records" class="Tests\Unit\LocalDataServiceTest" classname="Tests.Unit.LocalDataServiceTest" assertions="4" time="0.004977"/>
      </testsuite>
      <testsuite name="Tests\Unit\Models\ProvinceTest" file="tests/Unit/Models/ProvinceTest.php" tests="13" assertions="28" errors="0" failures="0" skipped="0" time="0.063834">
        <testcase name="it can create a province" file="tests/Unit/Models/ProvinceTest.php::it can create a province" class="Tests\Unit\Models\ProvinceTest" classname="Tests.Unit.Models.ProvinceTest" assertions="3" time="0.004097"/>
        <testcase name="it has correct fillable attributes" file="tests/Unit/Models/ProvinceTest.php::it has correct fillable attributes" class="Tests\Unit\Models\ProvinceTest" classname="Tests.Unit.Models.ProvinceTest" assertions="1" time="0.005884"/>
        <testcase name="it has correct casts" file="tests/Unit/Models/ProvinceTest.php::it has correct casts" class="Tests\Unit\Models\ProvinceTest" classname="Tests.Unit.Models.ProvinceTest" assertions="8" time="0.005367"/>
        <testcase name="it uses code as primary key" file="tests/Unit/Models/ProvinceTest.php::it uses code as primary key" class="Tests\Unit\Models\ProvinceTest" classname="Tests.Unit.Models.ProvinceTest" assertions="3" time="0.005699"/>
        <testcase name="it can have regencies" file="tests/Unit/Models/ProvinceTest.php::it can have regencies" class="Tests\Unit\Models\ProvinceTest" classname="Tests.Unit.Models.ProvinceTest" assertions="2" time="0.005121"/>
        <testcase name="it can access districts through regencies" file="tests/Unit/Models/ProvinceTest.php::it can access districts through regencies" class="Tests\Unit\Models\ProvinceTest" classname="Tests.Unit.Models.ProvinceTest" assertions="2" time="0.005075"/>
        <testcase name="it can search provinces" file="tests/Unit/Models/ProvinceTest.php::it can search provinces" class="Tests\Unit\Models\ProvinceTest" classname="Tests.Unit.Models.ProvinceTest" assertions="2" time="0.004722"/>
        <testcase name="it can get provinces with regency count" file="tests/Unit/Models/ProvinceTest.php::it can get provinces with regency count" class="Tests\Unit\Models\ProvinceTest" classname="Tests.Unit.Models.ProvinceTest" assertions="1" time="0.005104"/>
        <testcase name="it has formatted name attribute" file="tests/Unit/Models/ProvinceTest.php::it has formatted name attribute" class="Tests\Unit\Models\ProvinceTest" classname="Tests.Unit.Models.ProvinceTest" assertions="1" time="0.004603"/>
        <testcase name="it can check if has regencies" file="tests/Unit/Models/ProvinceTest.php::it can check if has regencies" class="Tests\Unit\Models\ProvinceTest" classname="Tests.Unit.Models.ProvinceTest" assertions="2" time="0.004156"/>
        <testcase name="it can get total districts count" file="tests/Unit/Models/ProvinceTest.php::it can get total districts count" class="Tests\Unit\Models\ProvinceTest" classname="Tests.Unit.Models.ProvinceTest" assertions="1" time="0.004289"/>
        <testcase name="it can get total villages count" file="tests/Unit/Models/ProvinceTest.php::it can get total villages count" class="Tests\Unit\Models\ProvinceTest" classname="Tests.Unit.Models.ProvinceTest" assertions="1" time="0.005804"/>
        <testcase name="it uses code as route key" file="tests/Unit/Models/ProvinceTest.php::it uses code as route key" class="Tests\Unit\Models\ProvinceTest" classname="Tests.Unit.Models.ProvinceTest" assertions="1" time="0.003913"/>
      </testsuite>
      <testsuite name="Tests\Unit\ModelsTest" file="tests/Unit/ModelsTest.php" tests="28" assertions="52" errors="0" failures="0" skipped="0" time="0.147396">
        <testcase name="`Province Model` → it can create a province" file="tests/Unit/ModelsTest.php::`Province Model` → it can create a province" class="Tests\Unit\ModelsTest" classname="Tests.Unit.ModelsTest" assertions="2" time="0.008307"/>
        <testcase name="`Province Model` → it has regencies relationship" file="tests/Unit/ModelsTest.php::`Province Model` → it has regencies relationship" class="Tests\Unit\ModelsTest" classname="Tests.Unit.ModelsTest" assertions="2" time="0.005088"/>
        <testcase name="`Province Model` → it can search by name" file="tests/Unit/ModelsTest.php::`Province Model` → it can search by name" class="Tests\Unit\ModelsTest" classname="Tests.Unit.ModelsTest" assertions="2" time="0.005123"/>
        <testcase name="`Province Model` → it can find by code" file="tests/Unit/ModelsTest.php::`Province Model` → it can find by code" class="Tests\Unit\ModelsTest" classname="Tests.Unit.ModelsTest" assertions="2" time="0.007191"/>
        <testcase name="`Province Model` → it returns null for non-existent code" file="tests/Unit/ModelsTest.php::`Province Model` → it returns null for non-existent code" class="Tests\Unit\ModelsTest" classname="Tests.Unit.ModelsTest" assertions="1" time="0.004723"/>
        <testcase name="`Province Model` → it uses correct table name" file="tests/Unit/ModelsTest.php::`Province Model` → it uses correct table name" class="Tests\Unit\ModelsTest" classname="Tests.Unit.ModelsTest" assertions="1" time="0.004172"/>
        <testcase name="`Province Model` → it has fillable attributes" file="tests/Unit/ModelsTest.php::`Province Model` → it has fillable attributes" class="Tests\Unit\ModelsTest" classname="Tests.Unit.ModelsTest" assertions="2" time="0.005333"/>
        <testcase name="`Regency Model` → it can create a regency" file="tests/Unit/ModelsTest.php::`Regency Model` → it can create a regency" class="Tests\Unit\ModelsTest" classname="Tests.Unit.ModelsTest" assertions="3" time="0.004920"/>
        <testcase name="`Regency Model` → it has province relationship" file="tests/Unit/ModelsTest.php::`Regency Model` → it has province relationship" class="Tests\Unit\ModelsTest" classname="Tests.Unit.ModelsTest" assertions="2" time="0.014855"/>
        <testcase name="`Regency Model` → it has districts relationship" file="tests/Unit/ModelsTest.php::`Regency Model` → it has districts relationship" class="Tests\Unit\ModelsTest" classname="Tests.Unit.ModelsTest" assertions="2" time="0.004948"/>
        <testcase name="`Regency Model` → it can find by province" file="tests/Unit/ModelsTest.php::`Regency Model` → it can find by province" class="Tests\Unit\ModelsTest" classname="Tests.Unit.ModelsTest" assertions="2" time="0.004265"/>
        <testcase name="`Regency Model` → it uses correct table name" file="tests/Unit/ModelsTest.php::`Regency Model` → it uses correct table name" class="Tests\Unit\ModelsTest" classname="Tests.Unit.ModelsTest" assertions="1" time="0.005759"/>
        <testcase name="`District Model` → it can create a district" file="tests/Unit/ModelsTest.php::`District Model` → it can create a district" class="Tests\Unit\ModelsTest" classname="Tests.Unit.ModelsTest" assertions="3" time="0.004653"/>
        <testcase name="`District Model` → it has regency relationship" file="tests/Unit/ModelsTest.php::`District Model` → it has regency relationship" class="Tests\Unit\ModelsTest" classname="Tests.Unit.ModelsTest" assertions="2" time="0.004245"/>
        <testcase name="`District Model` → it has villages relationship" file="tests/Unit/ModelsTest.php::`District Model` → it has villages relationship" class="Tests\Unit\ModelsTest" classname="Tests.Unit.ModelsTest" assertions="2" time="0.004235"/>
        <testcase name="`District Model` → it can find by regency" file="tests/Unit/ModelsTest.php::`District Model` → it can find by regency" class="Tests\Unit\ModelsTest" classname="Tests.Unit.ModelsTest" assertions="2" time="0.004649"/>
        <testcase name="`District Model` → it uses correct table name" file="tests/Unit/ModelsTest.php::`District Model` → it uses correct table name" class="Tests\Unit\ModelsTest" classname="Tests.Unit.ModelsTest" assertions="1" time="0.004023"/>
        <testcase name="`Village Model` → it can create a village" file="tests/Unit/ModelsTest.php::`Village Model` → it can create a village" class="Tests\Unit\ModelsTest" classname="Tests.Unit.ModelsTest" assertions="3" time="0.004167"/>
        <testcase name="`Village Model` → it has district relationship" file="tests/Unit/ModelsTest.php::`Village Model` → it has district relationship" class="Tests\Unit\ModelsTest" classname="Tests.Unit.ModelsTest" assertions="2" time="0.004548"/>
        <testcase name="`Village Model` → it can find by district" file="tests/Unit/ModelsTest.php::`Village Model` → it can find by district" class="Tests\Unit\ModelsTest" classname="Tests.Unit.ModelsTest" assertions="2" time="0.005129"/>
        <testcase name="`Village Model` → it uses correct table name" file="tests/Unit/ModelsTest.php::`Village Model` → it uses correct table name" class="Tests\Unit\ModelsTest" classname="Tests.Unit.ModelsTest" assertions="1" time="0.004304"/>
        <testcase name="`Model Search Functionality` → it performs case insensitive search" file="tests/Unit/ModelsTest.php::`Model Search Functionality` → it performs case insensitive search" class="Tests\Unit\ModelsTest" classname="Tests.Unit.ModelsTest" assertions="2" time="0.004333"/>
        <testcase name="`Model Search Functionality` → it performs partial name search" file="tests/Unit/ModelsTest.php::`Model Search Functionality` → it performs partial name search" class="Tests\Unit\ModelsTest" classname="Tests.Unit.ModelsTest" assertions="2" time="0.004824"/>
        <testcase name="`Model Search Functionality` → it returns empty results for non-matching search" file="tests/Unit/ModelsTest.php::`Model Search Functionality` → it returns empty results for non-matching search" class="Tests\Unit\ModelsTest" classname="Tests.Unit.ModelsTest" assertions="1" time="0.004574"/>
        <testcase name="`Model Validation` → it requires code field" file="tests/Unit/ModelsTest.php::`Model Validation` → it requires code field" class="Tests\Unit\ModelsTest" classname="Tests.Unit.ModelsTest" assertions="1" time="0.004500"/>
        <testcase name="`Model Validation` → it requires name field" file="tests/Unit/ModelsTest.php::`Model Validation` → it requires name field" class="Tests\Unit\ModelsTest" classname="Tests.Unit.ModelsTest" assertions="1" time="0.004356"/>
        <testcase name="`Model Validation` → it enforces unique code constraint" file="tests/Unit/ModelsTest.php::`Model Validation` → it enforces unique code constraint" class="Tests\Unit\ModelsTest" classname="Tests.Unit.ModelsTest" assertions="1" time="0.005011"/>
        <testcase name="`Model Relationships Cascade` → it maintains referential integrity" file="tests/Unit/ModelsTest.php::`Model Relationships Cascade` → it maintains referential integrity" class="Tests\Unit\ModelsTest" classname="Tests.Unit.ModelsTest" assertions="4" time="0.005162"/>
      </testsuite>
      <testsuite name="Tests\Unit\ProvinceAttributesTest" file="tests/Unit/ProvinceAttributesTest.php" tests="13" assertions="27" errors="0" failures="0" skipped="0" time="0.064142">
        <testcase name="`Province Attributes` → it gets formatted name attribute" file="tests/Unit/ProvinceAttributesTest.php::`Province Attributes` → it gets formatted name attribute" class="Tests\Unit\ProvinceAttributesTest" classname="Tests.Unit.ProvinceAttributesTest" assertions="1" time="0.005256"/>
        <testcase name="`Province Attributes` → it uses code as route key" file="tests/Unit/ProvinceAttributesTest.php::`Province Attributes` → it uses code as route key" class="Tests\Unit\ProvinceAttributesTest" classname="Tests.Unit.ProvinceAttributesTest" assertions="1" time="0.005168"/>
        <testcase name="`Province Attributes` → it checks if has regencies" file="tests/Unit/ProvinceAttributesTest.php::`Province Attributes` → it checks if has regencies" class="Tests\Unit\ProvinceAttributesTest" classname="Tests.Unit.ProvinceAttributesTest" assertions="2" time="0.004514"/>
        <testcase name="`Province Attributes` → it gets total districts count" file="tests/Unit/ProvinceAttributesTest.php::`Province Attributes` → it gets total districts count" class="Tests\Unit\ProvinceAttributesTest" classname="Tests.Unit.ProvinceAttributesTest" assertions="1" time="0.004361"/>
        <testcase name="`Province Attributes` → it gets total villages count" file="tests/Unit/ProvinceAttributesTest.php::`Province Attributes` → it gets total villages count" class="Tests\Unit\ProvinceAttributesTest" classname="Tests.Unit.ProvinceAttributesTest" assertions="1" time="0.005680"/>
        <testcase name="`Province Static Methods` → it can find by code static method" file="tests/Unit/ProvinceAttributesTest.php::`Province Static Methods` → it can find by code static method" class="Tests\Unit\ProvinceAttributesTest" classname="Tests.Unit.ProvinceAttributesTest" assertions="3" time="0.005111"/>
        <testcase name="`Province Static Methods` → it can search by name static method" file="tests/Unit/ProvinceAttributesTest.php::`Province Static Methods` → it can search by name static method" class="Tests\Unit\ProvinceAttributesTest" classname="Tests.Unit.ProvinceAttributesTest" assertions="3" time="0.004525"/>
        <testcase name="`Province Scopes` → it can scope search provinces" file="tests/Unit/ProvinceAttributesTest.php::`Province Scopes` → it can scope search provinces" class="Tests\Unit\ProvinceAttributesTest" classname="Tests.Unit.ProvinceAttributesTest" assertions="2" time="0.004934"/>
        <testcase name="`Province Scopes` → it can scope with regency count" file="tests/Unit/ProvinceAttributesTest.php::`Province Scopes` → it can scope with regency count" class="Tests\Unit\ProvinceAttributesTest" classname="Tests.Unit.ProvinceAttributesTest" assertions="1" time="0.004687"/>
        <testcase name="`Province Scopes` → it can scope with district count" file="tests/Unit/ProvinceAttributesTest.php::`Province Scopes` → it can scope with district count" class="Tests\Unit\ProvinceAttributesTest" classname="Tests.Unit.ProvinceAttributesTest" assertions="1" time="0.004772"/>
        <testcase name="`Province Relationships` → it has regencies relationship" file="tests/Unit/ProvinceAttributesTest.php::`Province Relationships` → it has regencies relationship" class="Tests\Unit\ProvinceAttributesTest" classname="Tests.Unit.ProvinceAttributesTest" assertions="3" time="0.004986"/>
        <testcase name="`Province Relationships` → it has districts through regencies relationship" file="tests/Unit/ProvinceAttributesTest.php::`Province Relationships` → it has districts through regencies relationship" class="Tests\Unit\ProvinceAttributesTest" classname="Tests.Unit.ProvinceAttributesTest" assertions="4" time="0.005398"/>
        <testcase name="`Province Relationships` → it can get villages through query builder" file="tests/Unit/ProvinceAttributesTest.php::`Province Relationships` → it can get villages through query builder" class="Tests\Unit\ProvinceAttributesTest" classname="Tests.Unit.ProvinceAttributesTest" assertions="4" time="0.004750"/>
      </testsuite>
      <testsuite name="Tests\Unit\RegencyAttributesTest" file="tests/Unit/RegencyAttributesTest.php" tests="13" assertions="25" errors="0" failures="0" skipped="0" time="0.072945">
        <testcase name="`Regency Attributes` → it gets formatted name attribute" file="tests/Unit/RegencyAttributesTest.php::`Regency Attributes` → it gets formatted name attribute" class="Tests\Unit\RegencyAttributesTest" classname="Tests.Unit.RegencyAttributesTest" assertions="1" time="0.004686"/>
        <testcase name="`Regency Attributes` → it gets full formatted name attribute" file="tests/Unit/RegencyAttributesTest.php::`Regency Attributes` → it gets full formatted name attribute" class="Tests\Unit\RegencyAttributesTest" classname="Tests.Unit.RegencyAttributesTest" assertions="1" time="0.004348"/>
        <testcase name="`Regency Attributes` → it uses code as route key" file="tests/Unit/RegencyAttributesTest.php::`Regency Attributes` → it uses code as route key" class="Tests\Unit\RegencyAttributesTest" classname="Tests.Unit.RegencyAttributesTest" assertions="1" time="0.004135"/>
        <testcase name="`Regency Static Methods` → it can find by code static method" file="tests/Unit/RegencyAttributesTest.php::`Regency Static Methods` → it can find by code static method" class="Tests\Unit\RegencyAttributesTest" classname="Tests.Unit.RegencyAttributesTest" assertions="3" time="0.004397"/>
        <testcase name="`Regency Static Methods` → it can search by name static method" file="tests/Unit/RegencyAttributesTest.php::`Regency Static Methods` → it can search by name static method" class="Tests\Unit\RegencyAttributesTest" classname="Tests.Unit.RegencyAttributesTest" assertions="3" time="0.004283"/>
        <testcase name="`Regency Static Methods` → it can get regencies by province static method" file="tests/Unit/RegencyAttributesTest.php::`Regency Static Methods` → it can get regencies by province static method" class="Tests\Unit\RegencyAttributesTest" classname="Tests.Unit.RegencyAttributesTest" assertions="2" time="0.004157"/>
        <testcase name="`Regency Scopes` → it can scope search regencies" file="tests/Unit/RegencyAttributesTest.php::`Regency Scopes` → it can scope search regencies" class="Tests\Unit\RegencyAttributesTest" classname="Tests.Unit.RegencyAttributesTest" assertions="2" time="0.004109"/>
        <testcase name="`Regency Scopes` → it can scope regencies in province" file="tests/Unit/RegencyAttributesTest.php::`Regency Scopes` → it can scope regencies in province" class="Tests\Unit\RegencyAttributesTest" classname="Tests.Unit.RegencyAttributesTest" assertions="1" time="0.004638"/>
        <testcase name="`Regency Scopes` → it can scope with district count" file="tests/Unit/RegencyAttributesTest.php::`Regency Scopes` → it can scope with district count" class="Tests\Unit\RegencyAttributesTest" classname="Tests.Unit.RegencyAttributesTest" assertions="1" time="0.007573"/>
        <testcase name="`Regency Scopes` → it can scope with village count" file="tests/Unit/RegencyAttributesTest.php::`Regency Scopes` → it can scope with village count" class="Tests\Unit\RegencyAttributesTest" classname="Tests.Unit.RegencyAttributesTest" assertions="1" time="0.005907"/>
        <testcase name="`Regency Relationships` → it has province relationship" file="tests/Unit/RegencyAttributesTest.php::`Regency Relationships` → it has province relationship" class="Tests\Unit\RegencyAttributesTest" classname="Tests.Unit.RegencyAttributesTest" assertions="2" time="0.008136"/>
        <testcase name="`Regency Relationships` → it has districts relationship" file="tests/Unit/RegencyAttributesTest.php::`Regency Relationships` → it has districts relationship" class="Tests\Unit\RegencyAttributesTest" classname="Tests.Unit.RegencyAttributesTest" assertions="3" time="0.008264"/>
        <testcase name="`Regency Relationships` → it has villages through districts relationship" file="tests/Unit/RegencyAttributesTest.php::`Regency Relationships` → it has villages through districts relationship" class="Tests\Unit\RegencyAttributesTest" classname="Tests.Unit.RegencyAttributesTest" assertions="4" time="0.008312"/>
      </testsuite>
      <testsuite name="Tests\Unit\VillageAttributesTest" file="tests/Unit/VillageAttributesTest.php" tests="20" assertions="54" errors="0" failures="0" skipped="0" time="0.109353">
        <testcase name="`Village Attributes` → it gets formatted name attribute" file="tests/Unit/VillageAttributesTest.php::`Village Attributes` → it gets formatted name attribute" class="Tests\Unit\VillageAttributesTest" classname="Tests.Unit.VillageAttributesTest" assertions="2" time="0.010311"/>
        <testcase name="`Village Attributes` → it gets full formatted name attribute" file="tests/Unit/VillageAttributesTest.php::`Village Attributes` → it gets full formatted name attribute" class="Tests\Unit\VillageAttributesTest" classname="Tests.Unit.VillageAttributesTest" assertions="1" time="0.005576"/>
        <testcase name="`Village Attributes` → it gets regency code attribute" file="tests/Unit/VillageAttributesTest.php::`Village Attributes` → it gets regency code attribute" class="Tests\Unit\VillageAttributesTest" classname="Tests.Unit.VillageAttributesTest" assertions="2" time="0.005811"/>
        <testcase name="`Village Attributes` → it gets province code attribute" file="tests/Unit/VillageAttributesTest.php::`Village Attributes` → it gets province code attribute" class="Tests\Unit\VillageAttributesTest" classname="Tests.Unit.VillageAttributesTest" assertions="2" time="0.005345"/>
        <testcase name="`Village Attributes` → it gets district name attribute" file="tests/Unit/VillageAttributesTest.php::`Village Attributes` → it gets district name attribute" class="Tests\Unit\VillageAttributesTest" classname="Tests.Unit.VillageAttributesTest" assertions="2" time="0.004784"/>
        <testcase name="`Village Attributes` → it gets regency name attribute" file="tests/Unit/VillageAttributesTest.php::`Village Attributes` → it gets regency name attribute" class="Tests\Unit\VillageAttributesTest" classname="Tests.Unit.VillageAttributesTest" assertions="2" time="0.005132"/>
        <testcase name="`Village Attributes` → it gets province name attribute" file="tests/Unit/VillageAttributesTest.php::`Village Attributes` → it gets province name attribute" class="Tests\Unit\VillageAttributesTest" classname="Tests.Unit.VillageAttributesTest" assertions="2" time="0.005085"/>
        <testcase name="`Village Attributes` → it determines village type from code" file="tests/Unit/VillageAttributesTest.php::`Village Attributes` → it determines village type from code" class="Tests\Unit\VillageAttributesTest" classname="Tests.Unit.VillageAttributesTest" assertions="2" time="0.004568"/>
        <testcase name="`Village Attributes` → it checks if is kelurahan" file="tests/Unit/VillageAttributesTest.php::`Village Attributes` → it checks if is kelurahan" class="Tests\Unit\VillageAttributesTest" classname="Tests.Unit.VillageAttributesTest" assertions="2" time="0.004478"/>
        <testcase name="`Village Attributes` → it checks if is desa" file="tests/Unit/VillageAttributesTest.php::`Village Attributes` → it checks if is desa" class="Tests\Unit\VillageAttributesTest" classname="Tests.Unit.VillageAttributesTest" assertions="2" time="0.005430"/>
        <testcase name="`Village Attributes` → it gets village hierarchy attribute" file="tests/Unit/VillageAttributesTest.php::`Village Attributes` → it gets village hierarchy attribute" class="Tests\Unit\VillageAttributesTest" classname="Tests.Unit.VillageAttributesTest" assertions="17" time="0.005529"/>
        <testcase name="`Village Static Methods` → it can find by code static method" file="tests/Unit/VillageAttributesTest.php::`Village Static Methods` → it can find by code static method" class="Tests\Unit\VillageAttributesTest" classname="Tests.Unit.VillageAttributesTest" assertions="3" time="0.004896"/>
        <testcase name="`Village Static Methods` → it can search by name static method" file="tests/Unit/VillageAttributesTest.php::`Village Static Methods` → it can search by name static method" class="Tests\Unit\VillageAttributesTest" classname="Tests.Unit.VillageAttributesTest" assertions="3" time="0.004996"/>
        <testcase name="`Village Static Methods` → it can get villages by district static method" file="tests/Unit/VillageAttributesTest.php::`Village Static Methods` → it can get villages by district static method" class="Tests\Unit\VillageAttributesTest" classname="Tests.Unit.VillageAttributesTest" assertions="3" time="0.005029"/>
        <testcase name="`Village Scopes` → it can scope search villages" file="tests/Unit/VillageAttributesTest.php::`Village Scopes` → it can scope search villages" class="Tests\Unit\VillageAttributesTest" classname="Tests.Unit.VillageAttributesTest" assertions="2" time="0.004913"/>
        <testcase name="`Village Scopes` → it can scope villages in district" file="tests/Unit/VillageAttributesTest.php::`Village Scopes` → it can scope villages in district" class="Tests\Unit\VillageAttributesTest" classname="Tests.Unit.VillageAttributesTest" assertions="1" time="0.005383"/>
        <testcase name="`Village Scopes` → it can scope villages in regency" file="tests/Unit/VillageAttributesTest.php::`Village Scopes` → it can scope villages in regency" class="Tests\Unit\VillageAttributesTest" classname="Tests.Unit.VillageAttributesTest" assertions="1" time="0.005731"/>
        <testcase name="`Village Scopes` → it can scope villages in province" file="tests/Unit/VillageAttributesTest.php::`Village Scopes` → it can scope villages in province" class="Tests\Unit\VillageAttributesTest" classname="Tests.Unit.VillageAttributesTest" assertions="1" time="0.005227"/>
        <testcase name="`Village Relationships` → it has regency through district relationship" file="tests/Unit/VillageAttributesTest.php::`Village Relationships` → it has regency through district relationship" class="Tests\Unit\VillageAttributesTest" classname="Tests.Unit.VillageAttributesTest" assertions="2" time="0.005816"/>
        <testcase name="`Village Relationships` → it gets province method" file="tests/Unit/VillageAttributesTest.php::`Village Relationships` → it gets province method" class="Tests\Unit\VillageAttributesTest" classname="Tests.Unit.VillageAttributesTest" assertions="2" time="0.005315"/>
      </testsuite>
    </testsuite>
  </testsuite>
</testsuites>
