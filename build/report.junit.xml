<?xml version="1.0" encoding="UTF-8"?>
<testsuites>
  <testsuite name="/Users/zaid/codes/idn-area-laravel-12/phpunit.xml.dist" tests="261" assertions="642" errors="0" failures="0" skipped="0" time="2.367778">
    <testsuite name="zaidysf/IdnArea Test Suite" tests="261" assertions="642" errors="0" failures="0" skipped="0" time="2.367778">
      <testsuite name="Tests\ArchTest" file="tests/ArchTest.php" tests="7" assertions="18" errors="0" failures="0" skipped="0" time="0.472980">
        <testcase name="it will not use debugging functions" file="tests/ArchTest.php::it will not use debugging functions" class="Tests\ArchTest" classname="Tests.ArchTest" assertions="5" time="0.330546"/>
        <testcase name="models extend Illuminate\Database\Eloquent\Model" file="tests/ArchTest.php::models extend Illuminate\Database\Eloquent\Model" class="Tests\ArchTest" classname="Tests.ArchTest" assertions="1" time="0.024093"/>
        <testcase name="models are in Models namespace" file="tests/ArchTest.php::models are in Models namespace" class="Tests\ArchTest" classname="Tests.ArchTest" assertions="1" time="0.004823"/>
        <testcase name="services are in Services namespace" file="tests/ArchTest.php::services are in Services namespace" class="Tests\ArchTest" classname="Tests.ArchTest" assertions="1" time="0.033311"/>
        <testcase name="commands extend Illuminate\Console\Command" file="tests/ArchTest.php::commands extend Illuminate\Console\Command" class="Tests\ArchTest" classname="Tests.ArchTest" assertions="1" time="0.045653"/>
        <testcase name="facades extend Illuminate\Support\Facades\Facade" file="tests/ArchTest.php::facades extend Illuminate\Support\Facades\Facade" class="Tests\ArchTest" classname="Tests.ArchTest" assertions="1" time="0.005698"/>
        <testcase name="ensure no Laravel helpers are used in models" file="tests/ArchTest.php::ensure no Laravel helpers are used in models" class="Tests\ArchTest" classname="Tests.ArchTest" assertions="8" time="0.028855"/>
      </testsuite>
      <testsuite name="Tests\Architecture\GeneralTest" file="tests/Architecture/GeneralTest.php" tests="11" assertions="11" errors="0" failures="0" skipped="0" time="0.213257">
        <testcase name="it will not use debugging functions" file="tests/Architecture/GeneralTest.php::it will not use debugging functions" class="Tests\Architecture\GeneralTest" classname="Tests.Architecture.GeneralTest" assertions="1" time="0.040860"/>
        <testcase name="models should extend Eloquent" file="tests/Architecture/GeneralTest.php::models should extend Eloquent" class="Tests\Architecture\GeneralTest" classname="Tests.Architecture.GeneralTest" assertions="1" time="0.004320"/>
        <testcase name="commands should extend Command" file="tests/Architecture/GeneralTest.php::commands should extend Command" class="Tests\Architecture\GeneralTest" classname="Tests.Architecture.GeneralTest" assertions="1" time="0.004380"/>
        <testcase name="facades should extend Facade" file="tests/Architecture/GeneralTest.php::facades should extend Facade" class="Tests\Architecture\GeneralTest" classname="Tests.Architecture.GeneralTest" assertions="1" time="0.004078"/>
        <testcase name="service provider should extend PackageServiceProvider" file="tests/Architecture/GeneralTest.php::service provider should extend PackageServiceProvider" class="Tests\Architecture\GeneralTest" classname="Tests.Architecture.GeneralTest" assertions="1" time="0.005804"/>
        <testcase name="models should use factories" file="tests/Architecture/GeneralTest.php::models should use factories" class="Tests\Architecture\GeneralTest" classname="Tests.Architecture.GeneralTest" assertions="1" time="0.006740"/>
        <testcase name="it does not use env outside of config" file="tests/Architecture/GeneralTest.php::it does not use env outside of config" class="Tests\Architecture\GeneralTest" classname="Tests.Architecture.GeneralTest" assertions="1" time="0.005134"/>
        <testcase name="controllers should not have die or exit" file="tests/Architecture/GeneralTest.php::controllers should not have die or exit" class="Tests\Architecture\GeneralTest" classname="Tests.Architecture.GeneralTest" assertions="1" time="0.005413"/>
        <testcase name="it will not use compact() function" file="tests/Architecture/GeneralTest.php::it will not use compact() function" class="Tests\Architecture\GeneralTest" classname="Tests.Architecture.GeneralTest" assertions="1" time="0.005256"/>
        <testcase name="ensure no use of globals" file="tests/Architecture/GeneralTest.php::ensure no use of globals" class="Tests\Architecture\GeneralTest" classname="Tests.Architecture.GeneralTest" assertions="1" time="0.006456"/>
        <testcase name="classes should be final or abstract" file="tests/Architecture/GeneralTest.php::classes should be final or abstract" class="Tests\Architecture\GeneralTest" classname="Tests.Architecture.GeneralTest" assertions="1" time="0.124816"/>
      </testsuite>
      <testsuite name="Tests\CommandTest" file="tests/CommandTest.php" tests="4" assertions="6" errors="0" failures="0" skipped="0" time="0.321563">
        <testcase name="`IdnAreaCommand` → it can instantiate command" file="tests/CommandTest.php::`IdnAreaCommand` → it can instantiate command" class="Tests\CommandTest" classname="Tests.CommandTest" assertions="1" time="0.024089"/>
        <testcase name="`IdnAreaCommand` → it has correct signature and description" file="tests/CommandTest.php::`IdnAreaCommand` → it has correct signature and description" class="Tests\CommandTest" classname="Tests.CommandTest" assertions="3" time="0.004441"/>
        <testcase name="`IdnAreaCommand` → it command is registered" file="tests/CommandTest.php::`IdnAreaCommand` → it command is registered" class="Tests\CommandTest" classname="Tests.CommandTest" assertions="1" time="0.043990"/>
        <testcase name="`IdnAreaCommand` → it can run command without force option" file="tests/CommandTest.php::`IdnAreaCommand` → it can run command without force option" class="Tests\CommandTest" classname="Tests.CommandTest" assertions="1" time="0.249043"/>
      </testsuite>
      <testsuite name="Tests\ExampleTest" file="tests/ExampleTest.php" tests="3" assertions="10" errors="0" failures="0" skipped="0" time="0.014311">
        <testcase name="it package is properly configured" file="tests/ExampleTest.php::it package is properly configured" class="Tests\ExampleTest" classname="Tests.ExampleTest" assertions="2" time="0.005901"/>
        <testcase name="it config is published correctly" file="tests/ExampleTest.php::it config is published correctly" class="Tests\ExampleTest" classname="Tests.ExampleTest" assertions="4" time="0.004369"/>
        <testcase name="it database tables exist" file="tests/ExampleTest.php::it database tables exist" class="Tests\ExampleTest" classname="Tests.ExampleTest" assertions="4" time="0.004041"/>
      </testsuite>
      <testsuite name="Tests\FacadeTest" file="tests/FacadeTest.php" tests="7" assertions="19" errors="0" failures="0" skipped="0" time="0.041999">
        <testcase name="`IdnArea Facade` → it can get provinces via facade" file="tests/FacadeTest.php::`IdnArea Facade` → it can get provinces via facade" class="Tests\FacadeTest" classname="Tests.FacadeTest" assertions="2" time="0.012809"/>
        <testcase name="`IdnArea Facade` → it can get specific province via facade" file="tests/FacadeTest.php::`IdnArea Facade` → it can get specific province via facade" class="Tests\FacadeTest" classname="Tests.FacadeTest" assertions="2" time="0.004973"/>
        <testcase name="`IdnArea Facade` → it can get regencies by province via facade" file="tests/FacadeTest.php::`IdnArea Facade` → it can get regencies by province via facade" class="Tests\FacadeTest" classname="Tests.FacadeTest" assertions="2" time="0.005009"/>
        <testcase name="`IdnArea Facade` → it can search areas via facade" file="tests/FacadeTest.php::`IdnArea Facade` → it can search areas via facade" class="Tests\FacadeTest" classname="Tests.FacadeTest" assertions="3" time="0.004320"/>
        <testcase name="`IdnArea Facade` → it can get area statistics via facade" file="tests/FacadeTest.php::`IdnArea Facade` → it can get area statistics via facade" class="Tests\FacadeTest" classname="Tests.FacadeTest" assertions="2" time="0.005479"/>
        <testcase name="`IdnArea Facade` → it returns null for non-existent areas" file="tests/FacadeTest.php::`IdnArea Facade` → it returns null for non-existent areas" class="Tests\FacadeTest" classname="Tests.FacadeTest" assertions="4" time="0.004672"/>
        <testcase name="`IdnArea Facade` → it returns empty collections for non-existent parent areas" file="tests/FacadeTest.php::`IdnArea Facade` → it returns empty collections for non-existent parent areas" class="Tests\FacadeTest" classname="Tests.FacadeTest" assertions="4" time="0.004737"/>
      </testsuite>
      <testsuite name="Tests\FactoryTest" file="tests/FactoryTest.php" tests="12" assertions="44" errors="0" failures="0" skipped="0" time="0.063387">
        <testcase name="`Model Factories` → it can create province using factory" file="tests/FactoryTest.php::`Model Factories` → it can create province using factory" class="Tests\FactoryTest" classname="Tests.FactoryTest" assertions="4" time="0.015977"/>
        <testcase name="`Model Factories` → it can create province with specific states" file="tests/FactoryTest.php::`Model Factories` → it can create province with specific states" class="Tests\FactoryTest" classname="Tests.FactoryTest" assertions="4" time="0.004117"/>
        <testcase name="`Model Factories` → it can create regency using factory" file="tests/FactoryTest.php::`Model Factories` → it can create regency using factory" class="Tests\FactoryTest" classname="Tests.FactoryTest" assertions="5" time="0.004116"/>
        <testcase name="`Model Factories` → it can create regency for specific province" file="tests/FactoryTest.php::`Model Factories` → it can create regency for specific province" class="Tests\FactoryTest" classname="Tests.FactoryTest" assertions="2" time="0.004524"/>
        <testcase name="`Model Factories` → it can create regency with specific types" file="tests/FactoryTest.php::`Model Factories` → it can create regency with specific types" class="Tests\FactoryTest" classname="Tests.FactoryTest" assertions="2" time="0.003785"/>
        <testcase name="`Model Factories` → it can create district using factory" file="tests/FactoryTest.php::`Model Factories` → it can create district using factory" class="Tests\FactoryTest" classname="Tests.FactoryTest" assertions="5" time="0.003758"/>
        <testcase name="`Model Factories` → it can create district for specific regency" file="tests/FactoryTest.php::`Model Factories` → it can create district for specific regency" class="Tests\FactoryTest" classname="Tests.FactoryTest" assertions="2" time="0.004357"/>
        <testcase name="`Model Factories` → it can create village using factory" file="tests/FactoryTest.php::`Model Factories` → it can create village using factory" class="Tests\FactoryTest" classname="Tests.FactoryTest" assertions="5" time="0.004177"/>
        <testcase name="`Model Factories` → it can create village for specific district" file="tests/FactoryTest.php::`Model Factories` → it can create village for specific district" class="Tests\FactoryTest" classname="Tests.FactoryTest" assertions="2" time="0.003895"/>
        <testcase name="`Model Factories` → it can create complete hierarchy using factories" file="tests/FactoryTest.php::`Model Factories` → it can create complete hierarchy using factories" class="Tests\FactoryTest" classname="Tests.FactoryTest" assertions="7" time="0.004884"/>
        <testcase name="`Model Factories` → it can create multiple models using factories" file="tests/FactoryTest.php::`Model Factories` → it can create multiple models using factories" class="Tests\FactoryTest" classname="Tests.FactoryTest" assertions="2" time="0.005075"/>
        <testcase name="`Model Factories` → it can make models without persisting to database" file="tests/FactoryTest.php::`Model Factories` → it can make models without persisting to database" class="Tests\FactoryTest" classname="Tests.FactoryTest" assertions="4" time="0.004720"/>
      </testsuite>
      <testsuite name="Tests\Feature\SetupCommandTest" file="tests/Feature/SetupCommandTest.php" tests="7" assertions="10" errors="0" failures="0" skipped="0" time="0.088458">
        <testcase name="it can run setup command interactively" file="tests/Feature/SetupCommandTest.php::it can run setup command interactively" class="Tests\Feature\SetupCommandTest" classname="Tests.Feature.SetupCommandTest" assertions="3" time="0.028554"/>
        <testcase name="it can run setup command with local mode parameter" file="tests/Feature/SetupCommandTest.php::it can run setup command with local mode parameter" class="Tests\Feature\SetupCommandTest" classname="Tests.Feature.SetupCommandTest" assertions="1" time="0.009568"/>
        <testcase name="it can run setup command with api mode parameter" file="tests/Feature/SetupCommandTest.php::it can run setup command with api mode parameter" class="Tests\Feature\SetupCommandTest" classname="Tests.Feature.SetupCommandTest" assertions="1" time="0.009630"/>
        <testcase name="it validates invalid mode parameter" file="tests/Feature/SetupCommandTest.php::it validates invalid mode parameter" class="Tests\Feature\SetupCommandTest" classname="Tests.Feature.SetupCommandTest" assertions="1" time="0.006384"/>
        <testcase name="it skips setup when already configured without force" file="tests/Feature/SetupCommandTest.php::it skips setup when already configured without force" class="Tests\Feature\SetupCommandTest" classname="Tests.Feature.SetupCommandTest" assertions="2" time="0.006822"/>
        <testcase name="it can force reconfigure when already setup" file="tests/Feature/SetupCommandTest.php::it can force reconfigure when already setup" class="Tests\Feature\SetupCommandTest" classname="Tests.Feature.SetupCommandTest" assertions="1" time="0.010179"/>
        <testcase name="it handles non-interactive mode correctly" file="tests/Feature/SetupCommandTest.php::it handles non-interactive mode correctly" class="Tests\Feature\SetupCommandTest" classname="Tests.Feature.SetupCommandTest" assertions="1" time="0.017322"/>
      </testsuite>
      <testsuite name="Tests\Feature\SwitchModeCommandTest" file="tests/Feature/SwitchModeCommandTest.php" tests="10" assertions="14" errors="0" failures="0" skipped="0" time="0.051004">
        <testcase name="it can switch to api mode" file="tests/Feature/SwitchModeCommandTest.php::it can switch to api mode" class="Tests\Feature\SwitchModeCommandTest" classname="Tests.Feature.SwitchModeCommandTest" assertions="1" time="0.007709"/>
        <testcase name="it can switch to local mode" file="tests/Feature/SwitchModeCommandTest.php::it can switch to local mode" class="Tests\Feature\SwitchModeCommandTest" classname="Tests.Feature.SwitchModeCommandTest" assertions="1" time="0.004834"/>
        <testcase name="it validates invalid mode parameter" file="tests/Feature/SwitchModeCommandTest.php::it validates invalid mode parameter" class="Tests\Feature\SwitchModeCommandTest" classname="Tests.Feature.SwitchModeCommandTest" assertions="1" time="0.004837"/>
        <testcase name="it shows current mode when already in target mode" file="tests/Feature/SwitchModeCommandTest.php::it shows current mode when already in target mode" class="Tests\Feature\SwitchModeCommandTest" classname="Tests.Feature.SwitchModeCommandTest" assertions="2" time="0.005105"/>
        <testcase name="it can skip validation checks" file="tests/Feature/SwitchModeCommandTest.php::it can skip validation checks" class="Tests\Feature\SwitchModeCommandTest" classname="Tests.Feature.SwitchModeCommandTest" assertions="1" time="0.004337"/>
        <testcase name="it can skip migration step" file="tests/Feature/SwitchModeCommandTest.php::it can skip migration step" class="Tests\Feature\SwitchModeCommandTest" classname="Tests.Feature.SwitchModeCommandTest" assertions="1" time="0.004449"/>
        <testcase name="it can skip seeding step" file="tests/Feature/SwitchModeCommandTest.php::it can skip seeding step" class="Tests\Feature\SwitchModeCommandTest" classname="Tests.Feature.SwitchModeCommandTest" assertions="1" time="0.004936"/>
        <testcase name="it handles interactive mode selection" file="tests/Feature/SwitchModeCommandTest.php::it handles interactive mode selection" class="Tests\Feature\SwitchModeCommandTest" classname="Tests.Feature.SwitchModeCommandTest" assertions="4" time="0.005614"/>
        <testcase name="it validates prerequisites for api mode" file="tests/Feature/SwitchModeCommandTest.php::it validates prerequisites for api mode" class="Tests\Feature\SwitchModeCommandTest" classname="Tests.Feature.SwitchModeCommandTest" assertions="1" time="0.004772"/>
        <testcase name="it validates prerequisites for local mode" file="tests/Feature/SwitchModeCommandTest.php::it validates prerequisites for local mode" class="Tests\Feature\SwitchModeCommandTest" classname="Tests.Feature.SwitchModeCommandTest" assertions="1" time="0.004409"/>
      </testsuite>
      <testsuite name="Tests\IdnAreaTest" file="tests/IdnAreaTest.php" tests="12" assertions="44" errors="0" failures="0" skipped="0" time="0.058925">
        <testcase name="it can instantiate the main class" file="tests/IdnAreaTest.php::it can instantiate the main class" class="Tests\IdnAreaTest" classname="Tests.IdnAreaTest" assertions="1" time="0.006236"/>
        <testcase name="it can get empty provinces collection" file="tests/IdnAreaTest.php::it can get empty provinces collection" class="Tests\IdnAreaTest" classname="Tests.IdnAreaTest" assertions="2" time="0.003894"/>
        <testcase name="it can search areas with empty results" file="tests/IdnAreaTest.php::it can search areas with empty results" class="Tests\IdnAreaTest" classname="Tests.IdnAreaTest" assertions="5" time="0.003924"/>
        <testcase name="it can get statistics with zero counts" file="tests/IdnAreaTest.php::it can get statistics with zero counts" class="Tests\IdnAreaTest" classname="Tests.IdnAreaTest" assertions="7" time="0.004735"/>
        <testcase name="it province model has correct configuration" file="tests/IdnAreaTest.php::it province model has correct configuration" class="Tests\IdnAreaTest" classname="Tests.IdnAreaTest" assertions="4" time="0.004302"/>
        <testcase name="it regency model has correct configuration" file="tests/IdnAreaTest.php::it regency model has correct configuration" class="Tests\IdnAreaTest" classname="Tests.IdnAreaTest" assertions="4" time="0.007555"/>
        <testcase name="it district model has correct configuration" file="tests/IdnAreaTest.php::it district model has correct configuration" class="Tests\IdnAreaTest" classname="Tests.IdnAreaTest" assertions="4" time="0.004984"/>
        <testcase name="it village model has correct configuration" file="tests/IdnAreaTest.php::it village model has correct configuration" class="Tests\IdnAreaTest" classname="Tests.IdnAreaTest" assertions="4" time="0.004201"/>
        <testcase name="it can use facade" file="tests/IdnAreaTest.php::it can use facade" class="Tests\IdnAreaTest" classname="Tests.IdnAreaTest" assertions="1" time="0.004716"/>
        <testcase name="it can create and retrieve province" file="tests/IdnAreaTest.php::it can create and retrieve province" class="Tests\IdnAreaTest" classname="Tests.IdnAreaTest" assertions="5" time="0.004727"/>
        <testcase name="it can create regency with province relationship" file="tests/IdnAreaTest.php::it can create regency with province relationship" class="Tests\IdnAreaTest" classname="Tests.IdnAreaTest" assertions="4" time="0.004929"/>
        <testcase name="it can test search with sample data" file="tests/IdnAreaTest.php::it can test search with sample data" class="Tests\IdnAreaTest" classname="Tests.IdnAreaTest" assertions="3" time="0.004724"/>
      </testsuite>
      <testsuite name="Tests\RelationshipTest" file="tests/RelationshipTest.php" tests="8" assertions="16" errors="0" failures="0" skipped="0" time="0.044810">
        <testcase name="`Model Relationships` → it province has many regencies" file="tests/RelationshipTest.php::`Model Relationships` → it province has many regencies" class="Tests\RelationshipTest" classname="Tests.RelationshipTest" assertions="2" time="0.007558"/>
        <testcase name="`Model Relationships` → it province has many districts through regencies" file="tests/RelationshipTest.php::`Model Relationships` → it province has many districts through regencies" class="Tests\RelationshipTest" classname="Tests.RelationshipTest" assertions="2" time="0.005334"/>
        <testcase name="`Model Relationships` → it regency belongs to province" file="tests/RelationshipTest.php::`Model Relationships` → it regency belongs to province" class="Tests\RelationshipTest" classname="Tests.RelationshipTest" assertions="2" time="0.005432"/>
        <testcase name="`Model Relationships` → it regency has many districts" file="tests/RelationshipTest.php::`Model Relationships` → it regency has many districts" class="Tests\RelationshipTest" classname="Tests.RelationshipTest" assertions="2" time="0.005961"/>
        <testcase name="`Model Relationships` → it district belongs to regency" file="tests/RelationshipTest.php::`Model Relationships` → it district belongs to regency" class="Tests\RelationshipTest" classname="Tests.RelationshipTest" assertions="2" time="0.005223"/>
        <testcase name="`Model Relationships` → it district has many villages" file="tests/RelationshipTest.php::`Model Relationships` → it district has many villages" class="Tests\RelationshipTest" classname="Tests.RelationshipTest" assertions="2" time="0.004938"/>
        <testcase name="`Model Relationships` → it village belongs to district" file="tests/RelationshipTest.php::`Model Relationships` → it village belongs to district" class="Tests\RelationshipTest" classname="Tests.RelationshipTest" assertions="2" time="0.005030"/>
        <testcase name="`Model Relationships` → it village has regency through district" file="tests/RelationshipTest.php::`Model Relationships` → it village has regency through district" class="Tests\RelationshipTest" classname="Tests.RelationshipTest" assertions="2" time="0.005334"/>
      </testsuite>
      <testsuite name="Tests\SeederTest" file="tests/SeederTest.php" tests="5" assertions="14" errors="0" failures="0" skipped="0" time="0.020483">
        <testcase name="`IdnAreaSeeder` → it can instantiate seeder" file="tests/SeederTest.php::`IdnAreaSeeder` → it can instantiate seeder" class="Tests\SeederTest" classname="Tests.SeederTest" assertions="1" time="0.006223"/>
        <testcase name="`IdnAreaSeeder` → it has correct data path" file="tests/SeederTest.php::`IdnAreaSeeder` → it has correct data path" class="Tests\SeederTest" classname="Tests.SeederTest" assertions="1" time="0.003435"/>
        <testcase name="`IdnAreaSeeder` → it detects existing data correctly" file="tests/SeederTest.php::`IdnAreaSeeder` → it detects existing data correctly" class="Tests\SeederTest" classname="Tests.SeederTest" assertions="2" time="0.003792"/>
        <testcase name="`IdnAreaSeeder` → it can parse boolean values correctly" file="tests/SeederTest.php::`IdnAreaSeeder` → it can parse boolean values correctly" class="Tests\SeederTest" classname="Tests.SeederTest" assertions="8" time="0.003569"/>
        <testcase name="`IdnAreaSeeder` → it throws exception for missing CSV file" file="tests/SeederTest.php::`IdnAreaSeeder` → it throws exception for missing CSV file" class="Tests\SeederTest" classname="Tests.SeederTest" assertions="2" time="0.003463"/>
      </testsuite>
      <testsuite name="Tests\Unit\DistrictAttributesTest" file="tests/Unit/DistrictAttributesTest.php" tests="12" assertions="21" errors="0" failures="0" skipped="0" time="0.054663">
        <testcase name="`District Attributes` → it gets formatted name attribute" file="tests/Unit/DistrictAttributesTest.php::`District Attributes` → it gets formatted name attribute" class="Tests\Unit\DistrictAttributesTest" classname="Tests.Unit.DistrictAttributesTest" assertions="1" time="0.005454"/>
        <testcase name="`District Attributes` → it gets full formatted name attribute" file="tests/Unit/DistrictAttributesTest.php::`District Attributes` → it gets full formatted name attribute" class="Tests\Unit\DistrictAttributesTest" classname="Tests.Unit.DistrictAttributesTest" assertions="1" time="0.004112"/>
        <testcase name="`District Attributes` → it uses code as route key" file="tests/Unit/DistrictAttributesTest.php::`District Attributes` → it uses code as route key" class="Tests\Unit\DistrictAttributesTest" classname="Tests.Unit.DistrictAttributesTest" assertions="1" time="0.004122"/>
        <testcase name="`District Static Methods` → it can find by code static method" file="tests/Unit/DistrictAttributesTest.php::`District Static Methods` → it can find by code static method" class="Tests\Unit\DistrictAttributesTest" classname="Tests.Unit.DistrictAttributesTest" assertions="3" time="0.004841"/>
        <testcase name="`District Static Methods` → it can search by name static method" file="tests/Unit/DistrictAttributesTest.php::`District Static Methods` → it can search by name static method" class="Tests\Unit\DistrictAttributesTest" classname="Tests.Unit.DistrictAttributesTest" assertions="3" time="0.004466"/>
        <testcase name="`District Static Methods` → it can get districts by regency static method" file="tests/Unit/DistrictAttributesTest.php::`District Static Methods` → it can get districts by regency static method" class="Tests\Unit\DistrictAttributesTest" classname="Tests.Unit.DistrictAttributesTest" assertions="2" time="0.004208"/>
        <testcase name="`District Scopes` → it can scope search districts" file="tests/Unit/DistrictAttributesTest.php::`District Scopes` → it can scope search districts" class="Tests\Unit\DistrictAttributesTest" classname="Tests.Unit.DistrictAttributesTest" assertions="2" time="0.004172"/>
        <testcase name="`District Scopes` → it can scope districts in regency" file="tests/Unit/DistrictAttributesTest.php::`District Scopes` → it can scope districts in regency" class="Tests\Unit\DistrictAttributesTest" classname="Tests.Unit.DistrictAttributesTest" assertions="1" time="0.004563"/>
        <testcase name="`District Scopes` → it can scope districts in province" file="tests/Unit/DistrictAttributesTest.php::`District Scopes` → it can scope districts in province" class="Tests\Unit\DistrictAttributesTest" classname="Tests.Unit.DistrictAttributesTest" assertions="1" time="0.004583"/>
        <testcase name="`District Scopes` → it can scope with village count" file="tests/Unit/DistrictAttributesTest.php::`District Scopes` → it can scope with village count" class="Tests\Unit\DistrictAttributesTest" classname="Tests.Unit.DistrictAttributesTest" assertions="1" time="0.005061"/>
        <testcase name="`District Relationships` → it has regency relationship" file="tests/Unit/DistrictAttributesTest.php::`District Relationships` → it has regency relationship" class="Tests\Unit\DistrictAttributesTest" classname="Tests.Unit.DistrictAttributesTest" assertions="2" time="0.004512"/>
        <testcase name="`District Relationships` → it has villages relationship" file="tests/Unit/DistrictAttributesTest.php::`District Relationships` → it has villages relationship" class="Tests\Unit\DistrictAttributesTest" classname="Tests.Unit.DistrictAttributesTest" assertions="3" time="0.004569"/>
      </testsuite>
      <testsuite name="Tests\Unit\IdnAreaExtendedTest" file="tests/Unit/IdnAreaExtendedTest.php" tests="14" assertions="52" errors="0" failures="0" skipped="0" time="0.070840">
        <testcase name="`IdnArea Extended Methods` → it can get mode" file="tests/Unit/IdnAreaExtendedTest.php::`IdnArea Extended Methods` → it can get mode" class="Tests\Unit\IdnAreaExtendedTest" classname="Tests.Unit.IdnAreaExtendedTest" assertions="1" time="0.007687"/>
        <testcase name="`IdnArea Extended Methods` → it can check if API is available" file="tests/Unit/IdnAreaExtendedTest.php::`IdnArea Extended Methods` → it can check if API is available" class="Tests\Unit\IdnAreaExtendedTest" classname="Tests.Unit.IdnAreaExtendedTest" assertions="1" time="0.004584"/>
        <testcase name="`IdnArea Extended Methods` → it can get periods" file="tests/Unit/IdnAreaExtendedTest.php::`IdnArea Extended Methods` → it can get periods" class="Tests\Unit\IdnAreaExtendedTest" classname="Tests.Unit.IdnAreaExtendedTest" assertions="1" time="0.004607"/>
        <testcase name="`IdnArea Extended Methods` → it can clear cache" file="tests/Unit/IdnAreaExtendedTest.php::`IdnArea Extended Methods` → it can clear cache" class="Tests\Unit\IdnAreaExtendedTest" classname="Tests.Unit.IdnAreaExtendedTest" assertions="1" time="0.005014"/>
        <testcase name="`IdnArea Extended Methods` → it can get hierarchy" file="tests/Unit/IdnAreaExtendedTest.php::`IdnArea Extended Methods` → it can get hierarchy" class="Tests\Unit\IdnAreaExtendedTest" classname="Tests.Unit.IdnAreaExtendedTest" assertions="14" time="0.005862"/>
        <testcase name="`IdnArea Extended Methods` → it can get multiple areas by codes" file="tests/Unit/IdnAreaExtendedTest.php::`IdnArea Extended Methods` → it can get multiple areas by codes" class="Tests\Unit\IdnAreaExtendedTest" classname="Tests.Unit.IdnAreaExtendedTest" assertions="6" time="0.004859"/>
        <testcase name="`IdnArea Extended Methods` → it can get multiple areas with specific type" file="tests/Unit/IdnAreaExtendedTest.php::`IdnArea Extended Methods` → it can get multiple areas with specific type" class="Tests\Unit\IdnAreaExtendedTest" classname="Tests.Unit.IdnAreaExtendedTest" assertions="4" time="0.004470"/>
        <testcase name="`IdnArea Extended Methods` → it handles non-existent codes in multiple" file="tests/Unit/IdnAreaExtendedTest.php::`IdnArea Extended Methods` → it handles non-existent codes in multiple" class="Tests\Unit\IdnAreaExtendedTest" classname="Tests.Unit.IdnAreaExtendedTest" assertions="1" time="0.004098"/>
        <testcase name="`IdnArea Extended Methods` → it handles empty hierarchy" file="tests/Unit/IdnAreaExtendedTest.php::`IdnArea Extended Methods` → it handles empty hierarchy" class="Tests\Unit\IdnAreaExtendedTest" classname="Tests.Unit.IdnAreaExtendedTest" assertions="2" time="0.004330"/>
        <testcase name="`IdnArea Extended Methods` → it can handle different config" file="tests/Unit/IdnAreaExtendedTest.php::`IdnArea Extended Methods` → it can handle different config" class="Tests\Unit\IdnAreaExtendedTest" classname="Tests.Unit.IdnAreaExtendedTest" assertions="1" time="0.004386"/>
        <testcase name="`IdnArea Extended Methods` → it can get all data types" file="tests/Unit/IdnAreaExtendedTest.php::`IdnArea Extended Methods` → it can get all data types" class="Tests\Unit\IdnAreaExtendedTest" classname="Tests.Unit.IdnAreaExtendedTest" assertions="4" time="0.005396"/>
        <testcase name="`IdnArea Extended Methods` → it can get specific items" file="tests/Unit/IdnAreaExtendedTest.php::`IdnArea Extended Methods` → it can get specific items" class="Tests\Unit\IdnAreaExtendedTest" classname="Tests.Unit.IdnAreaExtendedTest" assertions="4" time="0.005233"/>
        <testcase name="`IdnArea Extended Methods` → it can get related data" file="tests/Unit/IdnAreaExtendedTest.php::`IdnArea Extended Methods` → it can get related data" class="Tests\Unit\IdnAreaExtendedTest" classname="Tests.Unit.IdnAreaExtendedTest" assertions="3" time="0.005453"/>
        <testcase name="`IdnArea Extended Methods` → it can search different types" file="tests/Unit/IdnAreaExtendedTest.php::`IdnArea Extended Methods` → it can search different types" class="Tests\Unit\IdnAreaExtendedTest" classname="Tests.Unit.IdnAreaExtendedTest" assertions="9" time="0.004861"/>
      </testsuite>
      <testsuite name="Tests\Unit\IdnAreaManagerExtendedTest" file="tests/Unit/IdnAreaManagerExtendedTest.php" tests="16" assertions="38" errors="0" failures="0" skipped="0" time="0.084643">
        <testcase name="`IdnAreaManager Extended Methods` → it can get periods" file="tests/Unit/IdnAreaManagerExtendedTest.php::`IdnAreaManager Extended Methods` → it can get periods" class="Tests\Unit\IdnAreaManagerExtendedTest" classname="Tests.Unit.IdnAreaManagerExtendedTest" assertions="1" time="0.013656"/>
        <testcase name="`IdnAreaManager Extended Methods` → it can clear cache" file="tests/Unit/IdnAreaManagerExtendedTest.php::`IdnAreaManager Extended Methods` → it can clear cache" class="Tests\Unit\IdnAreaManagerExtendedTest" classname="Tests.Unit.IdnAreaManagerExtendedTest" assertions="1" time="0.004164"/>
        <testcase name="`IdnAreaManager Extended Methods` → it can get mode information" file="tests/Unit/IdnAreaManagerExtendedTest.php::`IdnAreaManager Extended Methods` → it can get mode information" class="Tests\Unit\IdnAreaManagerExtendedTest" classname="Tests.Unit.IdnAreaManagerExtendedTest" assertions="2" time="0.003908"/>
        <testcase name="`IdnAreaManager Extended Methods` → it can check if API is available" file="tests/Unit/IdnAreaManagerExtendedTest.php::`IdnAreaManager Extended Methods` → it can check if API is available" class="Tests\Unit\IdnAreaManagerExtendedTest" classname="Tests.Unit.IdnAreaManagerExtendedTest" assertions="1" time="0.004174"/>
        <testcase name="`IdnAreaManager Extended Methods` → it can get statistics" file="tests/Unit/IdnAreaManagerExtendedTest.php::`IdnAreaManager Extended Methods` → it can get statistics" class="Tests\Unit\IdnAreaManagerExtendedTest" classname="Tests.Unit.IdnAreaManagerExtendedTest" assertions="9" time="0.005770"/>
        <testcase name="`IdnAreaManager Extended Methods` → it can search provinces" file="tests/Unit/IdnAreaManagerExtendedTest.php::`IdnAreaManager Extended Methods` → it can search provinces" class="Tests\Unit\IdnAreaManagerExtendedTest" classname="Tests.Unit.IdnAreaManagerExtendedTest" assertions="2" time="0.004302"/>
        <testcase name="`IdnAreaManager Extended Methods` → it can search regencies" file="tests/Unit/IdnAreaManagerExtendedTest.php::`IdnAreaManager Extended Methods` → it can search regencies" class="Tests\Unit\IdnAreaManagerExtendedTest" classname="Tests.Unit.IdnAreaManagerExtendedTest" assertions="2" time="0.004213"/>
        <testcase name="`IdnAreaManager Extended Methods` → it can search districts" file="tests/Unit/IdnAreaManagerExtendedTest.php::`IdnAreaManager Extended Methods` → it can search districts" class="Tests\Unit\IdnAreaManagerExtendedTest" classname="Tests.Unit.IdnAreaManagerExtendedTest" assertions="2" time="0.004527"/>
        <testcase name="`IdnAreaManager Extended Methods` → it can search villages" file="tests/Unit/IdnAreaManagerExtendedTest.php::`IdnAreaManager Extended Methods` → it can search villages" class="Tests\Unit\IdnAreaManagerExtendedTest" classname="Tests.Unit.IdnAreaManagerExtendedTest" assertions="2" time="0.004301"/>
        <testcase name="`IdnAreaManager Extended Methods` → it can get current service" file="tests/Unit/IdnAreaManagerExtendedTest.php::`IdnAreaManager Extended Methods` → it can get current service" class="Tests\Unit\IdnAreaManagerExtendedTest" classname="Tests.Unit.IdnAreaManagerExtendedTest" assertions="1" time="0.004013"/>
        <testcase name="`IdnAreaManager Extended Methods` → it can get current mode" file="tests/Unit/IdnAreaManagerExtendedTest.php::`IdnAreaManager Extended Methods` → it can get current mode" class="Tests\Unit\IdnAreaManagerExtendedTest" classname="Tests.Unit.IdnAreaManagerExtendedTest" assertions="1" time="0.004364"/>
        <testcase name="`IdnAreaManager Extended Methods` → it can check if service is available" file="tests/Unit/IdnAreaManagerExtendedTest.php::`IdnAreaManager Extended Methods` → it can check if service is available" class="Tests\Unit\IdnAreaManagerExtendedTest" classname="Tests.Unit.IdnAreaManagerExtendedTest" assertions="1" time="0.004529"/>
        <testcase name="`IdnAreaManager Extended Methods` → it handles different config values" file="tests/Unit/IdnAreaManagerExtendedTest.php::`IdnAreaManager Extended Methods` → it handles different config values" class="Tests\Unit\IdnAreaManagerExtendedTest" classname="Tests.Unit.IdnAreaManagerExtendedTest" assertions="2" time="0.004658"/>
        <testcase name="`IdnAreaManager Extended Methods` → it can get all data methods with caching" file="tests/Unit/IdnAreaManagerExtendedTest.php::`IdnAreaManager Extended Methods` → it can get all data methods with caching" class="Tests\Unit\IdnAreaManagerExtendedTest" classname="Tests.Unit.IdnAreaManagerExtendedTest" assertions="4" time="0.006987"/>
        <testcase name="`IdnAreaManager Extended Methods` → it can get individual items" file="tests/Unit/IdnAreaManagerExtendedTest.php::`IdnAreaManager Extended Methods` → it can get individual items" class="Tests\Unit\IdnAreaManagerExtendedTest" classname="Tests.Unit.IdnAreaManagerExtendedTest" assertions="4" time="0.005166"/>
        <testcase name="`IdnAreaManager Extended Methods` → it can get related data" file="tests/Unit/IdnAreaManagerExtendedTest.php::`IdnAreaManager Extended Methods` → it can get related data" class="Tests\Unit\IdnAreaManagerExtendedTest" classname="Tests.Unit.IdnAreaManagerExtendedTest" assertions="3" time="0.005910"/>
      </testsuite>
      <testsuite name="Tests\Unit\IdnAreaManagerTest" file="tests/Unit/IdnAreaManagerTest.php" tests="13" assertions="47" errors="0" failures="0" skipped="0" time="0.116374">
        <testcase name="it uses local service when in local mode" file="tests/Unit/IdnAreaManagerTest.php::it uses local service when in local mode" class="Tests\Unit\IdnAreaManagerTest" classname="Tests.Unit.IdnAreaManagerTest" assertions="3" time="0.010020"/>
        <testcase name="it uses API service when in API mode" file="tests/Unit/IdnAreaManagerTest.php::it uses API service when in API mode" class="Tests\Unit\IdnAreaManagerTest" classname="Tests.Unit.IdnAreaManagerTest" assertions="2" time="0.025184"/>
        <testcase name="it defaults to local mode when mode is not configured" file="tests/Unit/IdnAreaManagerTest.php::it defaults to local mode when mode is not configured" class="Tests\Unit\IdnAreaManagerTest" classname="Tests.Unit.IdnAreaManagerTest" assertions="3" time="0.008022"/>
        <testcase name="it can get regencies by province code in local mode" file="tests/Unit/IdnAreaManagerTest.php::it can get regencies by province code in local mode" class="Tests\Unit\IdnAreaManagerTest" classname="Tests.Unit.IdnAreaManagerTest" assertions="3" time="0.005356"/>
        <testcase name="it can get regencies by province code in API mode" file="tests/Unit/IdnAreaManagerTest.php::it can get regencies by province code in API mode" class="Tests\Unit\IdnAreaManagerTest" classname="Tests.Unit.IdnAreaManagerTest" assertions="2" time="0.004751"/>
        <testcase name="it can get districts by regency code in both modes" file="tests/Unit/IdnAreaManagerTest.php::it can get districts by regency code in both modes" class="Tests\Unit\IdnAreaManagerTest" classname="Tests.Unit.IdnAreaManagerTest" assertions="5" time="0.005074"/>
        <testcase name="it can get villages by district code in both modes" file="tests/Unit/IdnAreaManagerTest.php::it can get villages by district code in both modes" class="Tests\Unit\IdnAreaManagerTest" classname="Tests.Unit.IdnAreaManagerTest" assertions="5" time="0.005773"/>
        <testcase name="it can find by code in local mode" file="tests/Unit/IdnAreaManagerTest.php::it can find by code in local mode" class="Tests\Unit\IdnAreaManagerTest" classname="Tests.Unit.IdnAreaManagerTest" assertions="8" time="0.011918"/>
        <testcase name="it can search by name in local mode" file="tests/Unit/IdnAreaManagerTest.php::it can search by name in local mode" class="Tests\Unit\IdnAreaManagerTest" classname="Tests.Unit.IdnAreaManagerTest" assertions="8" time="0.010789"/>
        <testcase name="it handles configuration changes dynamically" file="tests/Unit/IdnAreaManagerTest.php::it handles configuration changes dynamically" class="Tests\Unit\IdnAreaManagerTest" classname="Tests.Unit.IdnAreaManagerTest" assertions="3" time="0.011285"/>
        <testcase name="it maintains service instances correctly" file="tests/Unit/IdnAreaManagerTest.php::it maintains service instances correctly" class="Tests\Unit\IdnAreaManagerTest" classname="Tests.Unit.IdnAreaManagerTest" assertions="1" time="0.006193"/>
        <testcase name="it can get current mode" file="tests/Unit/IdnAreaManagerTest.php::it can get current mode" class="Tests\Unit\IdnAreaManagerTest" classname="Tests.Unit.IdnAreaManagerTest" assertions="2" time="0.005492"/>
        <testcase name="it validates service availability" file="tests/Unit/IdnAreaManagerTest.php::it validates service availability" class="Tests\Unit\IdnAreaManagerTest" classname="Tests.Unit.IdnAreaManagerTest" assertions="2" time="0.006517"/>
      </testsuite>
      <testsuite name="Tests\Unit\IdnAreaTest" file="tests/Unit/IdnAreaTest.php" tests="15" assertions="47" errors="0" failures="0" skipped="0" time="0.102495">
        <testcase name="it can get all provinces" file="tests/Unit/IdnAreaTest.php::it can get all provinces" class="Tests\Unit\IdnAreaTest" classname="Tests.Unit.IdnAreaTest" assertions="3" time="0.012641"/>
        <testcase name="it can get a province by code" file="tests/Unit/IdnAreaTest.php::it can get a province by code" class="Tests\Unit\IdnAreaTest" classname="Tests.Unit.IdnAreaTest" assertions="3" time="0.005190"/>
        <testcase name="it returns null for non-existent province" file="tests/Unit/IdnAreaTest.php::it returns null for non-existent province" class="Tests\Unit\IdnAreaTest" classname="Tests.Unit.IdnAreaTest" assertions="1" time="0.004545"/>
        <testcase name="it can get regencies by province" file="tests/Unit/IdnAreaTest.php::it can get regencies by province" class="Tests\Unit\IdnAreaTest" classname="Tests.Unit.IdnAreaTest" assertions="3" time="0.009546"/>
        <testcase name="it can get districts by regency" file="tests/Unit/IdnAreaTest.php::it can get districts by regency" class="Tests\Unit\IdnAreaTest" classname="Tests.Unit.IdnAreaTest" assertions="3" time="0.007735"/>
        <testcase name="it can get all districts by regency" file="tests/Unit/IdnAreaTest.php::it can get all districts by regency" class="Tests\Unit\IdnAreaTest" classname="Tests.Unit.IdnAreaTest" assertions="1" time="0.006611"/>
        <testcase name="it can get villages by district" file="tests/Unit/IdnAreaTest.php::it can get villages by district" class="Tests\Unit\IdnAreaTest" classname="Tests.Unit.IdnAreaTest" assertions="3" time="0.005562"/>
        <testcase name="it can search areas" file="tests/Unit/IdnAreaTest.php::it can search areas" class="Tests\Unit\IdnAreaTest" classname="Tests.Unit.IdnAreaTest" assertions="3" time="0.005181"/>
        <testcase name="it can search with partial match" file="tests/Unit/IdnAreaTest.php::it can search with partial match" class="Tests\Unit\IdnAreaTest" classname="Tests.Unit.IdnAreaTest" assertions="2" time="0.004777"/>
        <testcase name="it can get hierarchy" file="tests/Unit/IdnAreaTest.php::it can get hierarchy" class="Tests\Unit\IdnAreaTest" classname="Tests.Unit.IdnAreaTest" assertions="5" time="0.006048"/>
        <testcase name="it can get statistics" file="tests/Unit/IdnAreaTest.php::it can get statistics" class="Tests\Unit\IdnAreaTest" classname="Tests.Unit.IdnAreaTest" assertions="9" time="0.007553"/>
        <testcase name="it can get multiple areas by codes" file="tests/Unit/IdnAreaTest.php::it can get multiple areas by codes" class="Tests\Unit\IdnAreaTest" classname="Tests.Unit.IdnAreaTest" assertions="3" time="0.010054"/>
        <testcase name="it can clear cache" file="tests/Unit/IdnAreaTest.php::it can clear cache" class="Tests\Unit\IdnAreaTest" classname="Tests.Unit.IdnAreaTest" assertions="1" time="0.006019"/>
        <testcase name="it handles empty search results gracefully" file="tests/Unit/IdnAreaTest.php::it handles empty search results gracefully" class="Tests\Unit\IdnAreaTest" classname="Tests.Unit.IdnAreaTest" assertions="5" time="0.005547"/>
        <testcase name="it returns empty array for non-existent province hierarchy" file="tests/Unit/IdnAreaTest.php::it returns empty array for non-existent province hierarchy" class="Tests\Unit\IdnAreaTest" classname="Tests.Unit.IdnAreaTest" assertions="2" time="0.005485"/>
      </testsuite>
      <testsuite name="Tests\Unit\LocalDataServiceTest" file="tests/Unit/LocalDataServiceTest.php" tests="18" assertions="45" errors="0" failures="0" skipped="0" time="0.096717">
        <testcase name="it can get all provinces" file="tests/Unit/LocalDataServiceTest.php::it can get all provinces" class="Tests\Unit\LocalDataServiceTest" classname="Tests.Unit.LocalDataServiceTest" assertions="5" time="0.009888"/>
        <testcase name="it can get regencies by province code" file="tests/Unit/LocalDataServiceTest.php::it can get regencies by province code" class="Tests\Unit\LocalDataServiceTest" classname="Tests.Unit.LocalDataServiceTest" assertions="3" time="0.005066"/>
        <testcase name="it can get districts by regency code" file="tests/Unit/LocalDataServiceTest.php::it can get districts by regency code" class="Tests\Unit\LocalDataServiceTest" classname="Tests.Unit.LocalDataServiceTest" assertions="3" time="0.004625"/>
        <testcase name="it can get villages by district code" file="tests/Unit/LocalDataServiceTest.php::it can get villages by district code" class="Tests\Unit\LocalDataServiceTest" classname="Tests.Unit.LocalDataServiceTest" assertions="3" time="0.005860"/>
        <testcase name="it returns empty array for non-existent province" file="tests/Unit/LocalDataServiceTest.php::it returns empty array for non-existent province" class="Tests\Unit\LocalDataServiceTest" classname="Tests.Unit.LocalDataServiceTest" assertions="2" time="0.005151"/>
        <testcase name="it can get province by code" file="tests/Unit/LocalDataServiceTest.php::it can get province by code" class="Tests\Unit\LocalDataServiceTest" classname="Tests.Unit.LocalDataServiceTest" assertions="2" time="0.006003"/>
        <testcase name="it can get regency by code" file="tests/Unit/LocalDataServiceTest.php::it can get regency by code" class="Tests\Unit\LocalDataServiceTest" classname="Tests.Unit.LocalDataServiceTest" assertions="2" time="0.004908"/>
        <testcase name="it can get district by code" file="tests/Unit/LocalDataServiceTest.php::it can get district by code" class="Tests\Unit\LocalDataServiceTest" classname="Tests.Unit.LocalDataServiceTest" assertions="2" time="0.004342"/>
        <testcase name="it can get village by code" file="tests/Unit/LocalDataServiceTest.php::it can get village by code" class="Tests\Unit\LocalDataServiceTest" classname="Tests.Unit.LocalDataServiceTest" assertions="2" time="0.004861"/>
        <testcase name="it returns null for non-existent codes" file="tests/Unit/LocalDataServiceTest.php::it returns null for non-existent codes" class="Tests\Unit\LocalDataServiceTest" classname="Tests.Unit.LocalDataServiceTest" assertions="4" time="0.004969"/>
        <testcase name="it can search provinces by name" file="tests/Unit/LocalDataServiceTest.php::it can search provinces by name" class="Tests\Unit\LocalDataServiceTest" classname="Tests.Unit.LocalDataServiceTest" assertions="2" time="0.007984"/>
        <testcase name="it can search regencies by name" file="tests/Unit/LocalDataServiceTest.php::it can search regencies by name" class="Tests\Unit\LocalDataServiceTest" classname="Tests.Unit.LocalDataServiceTest" assertions="2" time="0.004774"/>
        <testcase name="it can search districts by name" file="tests/Unit/LocalDataServiceTest.php::it can search districts by name" class="Tests\Unit\LocalDataServiceTest" classname="Tests.Unit.LocalDataServiceTest" assertions="2" time="0.004668"/>
        <testcase name="it can search villages by name" file="tests/Unit/LocalDataServiceTest.php::it can search villages by name" class="Tests\Unit\LocalDataServiceTest" classname="Tests.Unit.LocalDataServiceTest" assertions="2" time="0.004576"/>
        <testcase name="it handles case insensitive search" file="tests/Unit/LocalDataServiceTest.php::it handles case insensitive search" class="Tests\Unit\LocalDataServiceTest" classname="Tests.Unit.LocalDataServiceTest" assertions="2" time="0.004326"/>
        <testcase name="it handles partial name search" file="tests/Unit/LocalDataServiceTest.php::it handles partial name search" class="Tests\Unit\LocalDataServiceTest" classname="Tests.Unit.LocalDataServiceTest" assertions="2" time="0.004436"/>
        <testcase name="it returns paginated results when requested" file="tests/Unit/LocalDataServiceTest.php::it returns paginated results when requested" class="Tests\Unit\LocalDataServiceTest" classname="Tests.Unit.LocalDataServiceTest" assertions="1" time="0.005178"/>
        <testcase name="it can count total records" file="tests/Unit/LocalDataServiceTest.php::it can count total records" class="Tests\Unit\LocalDataServiceTest" classname="Tests.Unit.LocalDataServiceTest" assertions="4" time="0.005104"/>
      </testsuite>
      <testsuite name="Tests\Unit\Models\ProvinceTest" file="tests/Unit/Models/ProvinceTest.php" tests="13" assertions="28" errors="0" failures="0" skipped="0" time="0.059751">
        <testcase name="it can create a province" file="tests/Unit/Models/ProvinceTest.php::it can create a province" class="Tests\Unit\Models\ProvinceTest" classname="Tests.Unit.Models.ProvinceTest" assertions="3" time="0.009760"/>
        <testcase name="it has correct fillable attributes" file="tests/Unit/Models/ProvinceTest.php::it has correct fillable attributes" class="Tests\Unit\Models\ProvinceTest" classname="Tests.Unit.Models.ProvinceTest" assertions="1" time="0.003785"/>
        <testcase name="it has correct casts" file="tests/Unit/Models/ProvinceTest.php::it has correct casts" class="Tests\Unit\Models\ProvinceTest" classname="Tests.Unit.Models.ProvinceTest" assertions="8" time="0.003782"/>
        <testcase name="it uses code as primary key" file="tests/Unit/Models/ProvinceTest.php::it uses code as primary key" class="Tests\Unit\Models\ProvinceTest" classname="Tests.Unit.Models.ProvinceTest" assertions="3" time="0.003828"/>
        <testcase name="it can have regencies" file="tests/Unit/Models/ProvinceTest.php::it can have regencies" class="Tests\Unit\Models\ProvinceTest" classname="Tests.Unit.Models.ProvinceTest" assertions="2" time="0.004465"/>
        <testcase name="it can access districts through regencies" file="tests/Unit/Models/ProvinceTest.php::it can access districts through regencies" class="Tests\Unit\Models\ProvinceTest" classname="Tests.Unit.Models.ProvinceTest" assertions="2" time="0.004275"/>
        <testcase name="it can search provinces" file="tests/Unit/Models/ProvinceTest.php::it can search provinces" class="Tests\Unit\Models\ProvinceTest" classname="Tests.Unit.Models.ProvinceTest" assertions="2" time="0.004025"/>
        <testcase name="it can get provinces with regency count" file="tests/Unit/Models/ProvinceTest.php::it can get provinces with regency count" class="Tests\Unit\Models\ProvinceTest" classname="Tests.Unit.Models.ProvinceTest" assertions="1" time="0.004410"/>
        <testcase name="it has formatted name attribute" file="tests/Unit/Models/ProvinceTest.php::it has formatted name attribute" class="Tests\Unit\Models\ProvinceTest" classname="Tests.Unit.Models.ProvinceTest" assertions="1" time="0.004370"/>
        <testcase name="it can check if has regencies" file="tests/Unit/Models/ProvinceTest.php::it can check if has regencies" class="Tests\Unit\Models\ProvinceTest" classname="Tests.Unit.Models.ProvinceTest" assertions="2" time="0.004515"/>
        <testcase name="it can get total districts count" file="tests/Unit/Models/ProvinceTest.php::it can get total districts count" class="Tests\Unit\Models\ProvinceTest" classname="Tests.Unit.Models.ProvinceTest" assertions="1" time="0.004298"/>
        <testcase name="it can get total villages count" file="tests/Unit/Models/ProvinceTest.php::it can get total villages count" class="Tests\Unit\Models\ProvinceTest" classname="Tests.Unit.Models.ProvinceTest" assertions="1" time="0.004338"/>
        <testcase name="it uses code as route key" file="tests/Unit/Models/ProvinceTest.php::it uses code as route key" class="Tests\Unit\Models\ProvinceTest" classname="Tests.Unit.Models.ProvinceTest" assertions="1" time="0.003899"/>
      </testsuite>
      <testsuite name="Tests\Unit\ModelsTest" file="tests/Unit/ModelsTest.php" tests="28" assertions="52" errors="0" failures="0" skipped="0" time="0.135201">
        <testcase name="`Province Model` → it can create a province" file="tests/Unit/ModelsTest.php::`Province Model` → it can create a province" class="Tests\Unit\ModelsTest" classname="Tests.Unit.ModelsTest" assertions="2" time="0.006459"/>
        <testcase name="`Province Model` → it has regencies relationship" file="tests/Unit/ModelsTest.php::`Province Model` → it has regencies relationship" class="Tests\Unit\ModelsTest" classname="Tests.Unit.ModelsTest" assertions="2" time="0.004161"/>
        <testcase name="`Province Model` → it can search by name" file="tests/Unit/ModelsTest.php::`Province Model` → it can search by name" class="Tests\Unit\ModelsTest" classname="Tests.Unit.ModelsTest" assertions="2" time="0.004079"/>
        <testcase name="`Province Model` → it can find by code" file="tests/Unit/ModelsTest.php::`Province Model` → it can find by code" class="Tests\Unit\ModelsTest" classname="Tests.Unit.ModelsTest" assertions="2" time="0.004265"/>
        <testcase name="`Province Model` → it returns null for non-existent code" file="tests/Unit/ModelsTest.php::`Province Model` → it returns null for non-existent code" class="Tests\Unit\ModelsTest" classname="Tests.Unit.ModelsTest" assertions="1" time="0.004992"/>
        <testcase name="`Province Model` → it uses correct table name" file="tests/Unit/ModelsTest.php::`Province Model` → it uses correct table name" class="Tests\Unit\ModelsTest" classname="Tests.Unit.ModelsTest" assertions="1" time="0.004091"/>
        <testcase name="`Province Model` → it has fillable attributes" file="tests/Unit/ModelsTest.php::`Province Model` → it has fillable attributes" class="Tests\Unit\ModelsTest" classname="Tests.Unit.ModelsTest" assertions="2" time="0.003995"/>
        <testcase name="`Regency Model` → it can create a regency" file="tests/Unit/ModelsTest.php::`Regency Model` → it can create a regency" class="Tests\Unit\ModelsTest" classname="Tests.Unit.ModelsTest" assertions="3" time="0.004309"/>
        <testcase name="`Regency Model` → it has province relationship" file="tests/Unit/ModelsTest.php::`Regency Model` → it has province relationship" class="Tests\Unit\ModelsTest" classname="Tests.Unit.ModelsTest" assertions="2" time="0.004615"/>
        <testcase name="`Regency Model` → it has districts relationship" file="tests/Unit/ModelsTest.php::`Regency Model` → it has districts relationship" class="Tests\Unit\ModelsTest" classname="Tests.Unit.ModelsTest" assertions="2" time="0.004631"/>
        <testcase name="`Regency Model` → it can find by province" file="tests/Unit/ModelsTest.php::`Regency Model` → it can find by province" class="Tests\Unit\ModelsTest" classname="Tests.Unit.ModelsTest" assertions="2" time="0.004374"/>
        <testcase name="`Regency Model` → it uses correct table name" file="tests/Unit/ModelsTest.php::`Regency Model` → it uses correct table name" class="Tests\Unit\ModelsTest" classname="Tests.Unit.ModelsTest" assertions="1" time="0.004049"/>
        <testcase name="`District Model` → it can create a district" file="tests/Unit/ModelsTest.php::`District Model` → it can create a district" class="Tests\Unit\ModelsTest" classname="Tests.Unit.ModelsTest" assertions="3" time="0.004163"/>
        <testcase name="`District Model` → it has regency relationship" file="tests/Unit/ModelsTest.php::`District Model` → it has regency relationship" class="Tests\Unit\ModelsTest" classname="Tests.Unit.ModelsTest" assertions="2" time="0.004948"/>
        <testcase name="`District Model` → it has villages relationship" file="tests/Unit/ModelsTest.php::`District Model` → it has villages relationship" class="Tests\Unit\ModelsTest" classname="Tests.Unit.ModelsTest" assertions="2" time="0.004705"/>
        <testcase name="`District Model` → it can find by regency" file="tests/Unit/ModelsTest.php::`District Model` → it can find by regency" class="Tests\Unit\ModelsTest" classname="Tests.Unit.ModelsTest" assertions="2" time="0.007418"/>
        <testcase name="`District Model` → it uses correct table name" file="tests/Unit/ModelsTest.php::`District Model` → it uses correct table name" class="Tests\Unit\ModelsTest" classname="Tests.Unit.ModelsTest" assertions="1" time="0.004899"/>
        <testcase name="`Village Model` → it can create a village" file="tests/Unit/ModelsTest.php::`Village Model` → it can create a village" class="Tests\Unit\ModelsTest" classname="Tests.Unit.ModelsTest" assertions="3" time="0.005011"/>
        <testcase name="`Village Model` → it has district relationship" file="tests/Unit/ModelsTest.php::`Village Model` → it has district relationship" class="Tests\Unit\ModelsTest" classname="Tests.Unit.ModelsTest" assertions="2" time="0.005314"/>
        <testcase name="`Village Model` → it can find by district" file="tests/Unit/ModelsTest.php::`Village Model` → it can find by district" class="Tests\Unit\ModelsTest" classname="Tests.Unit.ModelsTest" assertions="2" time="0.005228"/>
        <testcase name="`Village Model` → it uses correct table name" file="tests/Unit/ModelsTest.php::`Village Model` → it uses correct table name" class="Tests\Unit\ModelsTest" classname="Tests.Unit.ModelsTest" assertions="1" time="0.004759"/>
        <testcase name="`Model Search Functionality` → it performs case insensitive search" file="tests/Unit/ModelsTest.php::`Model Search Functionality` → it performs case insensitive search" class="Tests\Unit\ModelsTest" classname="Tests.Unit.ModelsTest" assertions="2" time="0.004390"/>
        <testcase name="`Model Search Functionality` → it performs partial name search" file="tests/Unit/ModelsTest.php::`Model Search Functionality` → it performs partial name search" class="Tests\Unit\ModelsTest" classname="Tests.Unit.ModelsTest" assertions="2" time="0.004566"/>
        <testcase name="`Model Search Functionality` → it returns empty results for non-matching search" file="tests/Unit/ModelsTest.php::`Model Search Functionality` → it returns empty results for non-matching search" class="Tests\Unit\ModelsTest" classname="Tests.Unit.ModelsTest" assertions="1" time="0.004700"/>
        <testcase name="`Model Validation` → it requires code field" file="tests/Unit/ModelsTest.php::`Model Validation` → it requires code field" class="Tests\Unit\ModelsTest" classname="Tests.Unit.ModelsTest" assertions="1" time="0.004675"/>
        <testcase name="`Model Validation` → it requires name field" file="tests/Unit/ModelsTest.php::`Model Validation` → it requires name field" class="Tests\Unit\ModelsTest" classname="Tests.Unit.ModelsTest" assertions="1" time="0.005189"/>
        <testcase name="`Model Validation` → it enforces unique code constraint" file="tests/Unit/ModelsTest.php::`Model Validation` → it enforces unique code constraint" class="Tests\Unit\ModelsTest" classname="Tests.Unit.ModelsTest" assertions="1" time="0.005036"/>
        <testcase name="`Model Relationships Cascade` → it maintains referential integrity" file="tests/Unit/ModelsTest.php::`Model Relationships Cascade` → it maintains referential integrity" class="Tests\Unit\ModelsTest" classname="Tests.Unit.ModelsTest" assertions="4" time="0.006183"/>
      </testsuite>
      <testsuite name="Tests\Unit\ProvinceAttributesTest" file="tests/Unit/ProvinceAttributesTest.php" tests="13" assertions="27" errors="0" failures="0" skipped="0" time="0.081344">
        <testcase name="`Province Attributes` → it gets formatted name attribute" file="tests/Unit/ProvinceAttributesTest.php::`Province Attributes` → it gets formatted name attribute" class="Tests\Unit\ProvinceAttributesTest" classname="Tests.Unit.ProvinceAttributesTest" assertions="1" time="0.011386"/>
        <testcase name="`Province Attributes` → it uses code as route key" file="tests/Unit/ProvinceAttributesTest.php::`Province Attributes` → it uses code as route key" class="Tests\Unit\ProvinceAttributesTest" classname="Tests.Unit.ProvinceAttributesTest" assertions="1" time="0.004935"/>
        <testcase name="`Province Attributes` → it checks if has regencies" file="tests/Unit/ProvinceAttributesTest.php::`Province Attributes` → it checks if has regencies" class="Tests\Unit\ProvinceAttributesTest" classname="Tests.Unit.ProvinceAttributesTest" assertions="2" time="0.005174"/>
        <testcase name="`Province Attributes` → it gets total districts count" file="tests/Unit/ProvinceAttributesTest.php::`Province Attributes` → it gets total districts count" class="Tests\Unit\ProvinceAttributesTest" classname="Tests.Unit.ProvinceAttributesTest" assertions="1" time="0.010875"/>
        <testcase name="`Province Attributes` → it gets total villages count" file="tests/Unit/ProvinceAttributesTest.php::`Province Attributes` → it gets total villages count" class="Tests\Unit\ProvinceAttributesTest" classname="Tests.Unit.ProvinceAttributesTest" assertions="1" time="0.005621"/>
        <testcase name="`Province Static Methods` → it can find by code static method" file="tests/Unit/ProvinceAttributesTest.php::`Province Static Methods` → it can find by code static method" class="Tests\Unit\ProvinceAttributesTest" classname="Tests.Unit.ProvinceAttributesTest" assertions="3" time="0.005781"/>
        <testcase name="`Province Static Methods` → it can search by name static method" file="tests/Unit/ProvinceAttributesTest.php::`Province Static Methods` → it can search by name static method" class="Tests\Unit\ProvinceAttributesTest" classname="Tests.Unit.ProvinceAttributesTest" assertions="3" time="0.005865"/>
        <testcase name="`Province Scopes` → it can scope search provinces" file="tests/Unit/ProvinceAttributesTest.php::`Province Scopes` → it can scope search provinces" class="Tests\Unit\ProvinceAttributesTest" classname="Tests.Unit.ProvinceAttributesTest" assertions="2" time="0.005568"/>
        <testcase name="`Province Scopes` → it can scope with regency count" file="tests/Unit/ProvinceAttributesTest.php::`Province Scopes` → it can scope with regency count" class="Tests\Unit\ProvinceAttributesTest" classname="Tests.Unit.ProvinceAttributesTest" assertions="1" time="0.004995"/>
        <testcase name="`Province Scopes` → it can scope with district count" file="tests/Unit/ProvinceAttributesTest.php::`Province Scopes` → it can scope with district count" class="Tests\Unit\ProvinceAttributesTest" classname="Tests.Unit.ProvinceAttributesTest" assertions="1" time="0.005156"/>
        <testcase name="`Province Relationships` → it has regencies relationship" file="tests/Unit/ProvinceAttributesTest.php::`Province Relationships` → it has regencies relationship" class="Tests\Unit\ProvinceAttributesTest" classname="Tests.Unit.ProvinceAttributesTest" assertions="3" time="0.005567"/>
        <testcase name="`Province Relationships` → it has districts through regencies relationship" file="tests/Unit/ProvinceAttributesTest.php::`Province Relationships` → it has districts through regencies relationship" class="Tests\Unit\ProvinceAttributesTest" classname="Tests.Unit.ProvinceAttributesTest" assertions="4" time="0.005314"/>
        <testcase name="`Province Relationships` → it can get villages through query builder" file="tests/Unit/ProvinceAttributesTest.php::`Province Relationships` → it can get villages through query builder" class="Tests\Unit\ProvinceAttributesTest" classname="Tests.Unit.ProvinceAttributesTest" assertions="4" time="0.005107"/>
      </testsuite>
      <testsuite name="Tests\Unit\RegencyAttributesTest" file="tests/Unit/RegencyAttributesTest.php" tests="13" assertions="25" errors="0" failures="0" skipped="0" time="0.066698">
        <testcase name="`Regency Attributes` → it gets formatted name attribute" file="tests/Unit/RegencyAttributesTest.php::`Regency Attributes` → it gets formatted name attribute" class="Tests\Unit\RegencyAttributesTest" classname="Tests.Unit.RegencyAttributesTest" assertions="1" time="0.008994"/>
        <testcase name="`Regency Attributes` → it gets full formatted name attribute" file="tests/Unit/RegencyAttributesTest.php::`Regency Attributes` → it gets full formatted name attribute" class="Tests\Unit\RegencyAttributesTest" classname="Tests.Unit.RegencyAttributesTest" assertions="1" time="0.005232"/>
        <testcase name="`Regency Attributes` → it uses code as route key" file="tests/Unit/RegencyAttributesTest.php::`Regency Attributes` → it uses code as route key" class="Tests\Unit\RegencyAttributesTest" classname="Tests.Unit.RegencyAttributesTest" assertions="1" time="0.004628"/>
        <testcase name="`Regency Static Methods` → it can find by code static method" file="tests/Unit/RegencyAttributesTest.php::`Regency Static Methods` → it can find by code static method" class="Tests\Unit\RegencyAttributesTest" classname="Tests.Unit.RegencyAttributesTest" assertions="3" time="0.004590"/>
        <testcase name="`Regency Static Methods` → it can search by name static method" file="tests/Unit/RegencyAttributesTest.php::`Regency Static Methods` → it can search by name static method" class="Tests\Unit\RegencyAttributesTest" classname="Tests.Unit.RegencyAttributesTest" assertions="3" time="0.004485"/>
        <testcase name="`Regency Static Methods` → it can get regencies by province static method" file="tests/Unit/RegencyAttributesTest.php::`Regency Static Methods` → it can get regencies by province static method" class="Tests\Unit\RegencyAttributesTest" classname="Tests.Unit.RegencyAttributesTest" assertions="2" time="0.004384"/>
        <testcase name="`Regency Scopes` → it can scope search regencies" file="tests/Unit/RegencyAttributesTest.php::`Regency Scopes` → it can scope search regencies" class="Tests\Unit\RegencyAttributesTest" classname="Tests.Unit.RegencyAttributesTest" assertions="2" time="0.004578"/>
        <testcase name="`Regency Scopes` → it can scope regencies in province" file="tests/Unit/RegencyAttributesTest.php::`Regency Scopes` → it can scope regencies in province" class="Tests\Unit\RegencyAttributesTest" classname="Tests.Unit.RegencyAttributesTest" assertions="1" time="0.004499"/>
        <testcase name="`Regency Scopes` → it can scope with district count" file="tests/Unit/RegencyAttributesTest.php::`Regency Scopes` → it can scope with district count" class="Tests\Unit\RegencyAttributesTest" classname="Tests.Unit.RegencyAttributesTest" assertions="1" time="0.005219"/>
        <testcase name="`Regency Scopes` → it can scope with village count" file="tests/Unit/RegencyAttributesTest.php::`Regency Scopes` → it can scope with village count" class="Tests\Unit\RegencyAttributesTest" classname="Tests.Unit.RegencyAttributesTest" assertions="1" time="0.005387"/>
        <testcase name="`Regency Relationships` → it has province relationship" file="tests/Unit/RegencyAttributesTest.php::`Regency Relationships` → it has province relationship" class="Tests\Unit\RegencyAttributesTest" classname="Tests.Unit.RegencyAttributesTest" assertions="2" time="0.004732"/>
        <testcase name="`Regency Relationships` → it has districts relationship" file="tests/Unit/RegencyAttributesTest.php::`Regency Relationships` → it has districts relationship" class="Tests\Unit\RegencyAttributesTest" classname="Tests.Unit.RegencyAttributesTest" assertions="3" time="0.004630"/>
        <testcase name="`Regency Relationships` → it has villages through districts relationship" file="tests/Unit/RegencyAttributesTest.php::`Regency Relationships` → it has villages through districts relationship" class="Tests\Unit\RegencyAttributesTest" classname="Tests.Unit.RegencyAttributesTest" assertions="4" time="0.005340"/>
      </testsuite>
      <testsuite name="Tests\Unit\VillageAttributesTest" file="tests/Unit/VillageAttributesTest.php" tests="20" assertions="54" errors="0" failures="0" skipped="0" time="0.107874">
        <testcase name="`Village Attributes` → it gets formatted name attribute" file="tests/Unit/VillageAttributesTest.php::`Village Attributes` → it gets formatted name attribute" class="Tests\Unit\VillageAttributesTest" classname="Tests.Unit.VillageAttributesTest" assertions="2" time="0.008080"/>
        <testcase name="`Village Attributes` → it gets full formatted name attribute" file="tests/Unit/VillageAttributesTest.php::`Village Attributes` → it gets full formatted name attribute" class="Tests\Unit\VillageAttributesTest" classname="Tests.Unit.VillageAttributesTest" assertions="1" time="0.004491"/>
        <testcase name="`Village Attributes` → it gets regency code attribute" file="tests/Unit/VillageAttributesTest.php::`Village Attributes` → it gets regency code attribute" class="Tests\Unit\VillageAttributesTest" classname="Tests.Unit.VillageAttributesTest" assertions="2" time="0.004727"/>
        <testcase name="`Village Attributes` → it gets province code attribute" file="tests/Unit/VillageAttributesTest.php::`Village Attributes` → it gets province code attribute" class="Tests\Unit\VillageAttributesTest" classname="Tests.Unit.VillageAttributesTest" assertions="2" time="0.004581"/>
        <testcase name="`Village Attributes` → it gets district name attribute" file="tests/Unit/VillageAttributesTest.php::`Village Attributes` → it gets district name attribute" class="Tests\Unit\VillageAttributesTest" classname="Tests.Unit.VillageAttributesTest" assertions="2" time="0.004369"/>
        <testcase name="`Village Attributes` → it gets regency name attribute" file="tests/Unit/VillageAttributesTest.php::`Village Attributes` → it gets regency name attribute" class="Tests\Unit\VillageAttributesTest" classname="Tests.Unit.VillageAttributesTest" assertions="2" time="0.005945"/>
        <testcase name="`Village Attributes` → it gets province name attribute" file="tests/Unit/VillageAttributesTest.php::`Village Attributes` → it gets province name attribute" class="Tests\Unit\VillageAttributesTest" classname="Tests.Unit.VillageAttributesTest" assertions="2" time="0.006459"/>
        <testcase name="`Village Attributes` → it determines village type from code" file="tests/Unit/VillageAttributesTest.php::`Village Attributes` → it determines village type from code" class="Tests\Unit\VillageAttributesTest" classname="Tests.Unit.VillageAttributesTest" assertions="2" time="0.005708"/>
        <testcase name="`Village Attributes` → it checks if is kelurahan" file="tests/Unit/VillageAttributesTest.php::`Village Attributes` → it checks if is kelurahan" class="Tests\Unit\VillageAttributesTest" classname="Tests.Unit.VillageAttributesTest" assertions="2" time="0.005142"/>
        <testcase name="`Village Attributes` → it checks if is desa" file="tests/Unit/VillageAttributesTest.php::`Village Attributes` → it checks if is desa" class="Tests\Unit\VillageAttributesTest" classname="Tests.Unit.VillageAttributesTest" assertions="2" time="0.005658"/>
        <testcase name="`Village Attributes` → it gets village hierarchy attribute" file="tests/Unit/VillageAttributesTest.php::`Village Attributes` → it gets village hierarchy attribute" class="Tests\Unit\VillageAttributesTest" classname="Tests.Unit.VillageAttributesTest" assertions="17" time="0.005363"/>
        <testcase name="`Village Static Methods` → it can find by code static method" file="tests/Unit/VillageAttributesTest.php::`Village Static Methods` → it can find by code static method" class="Tests\Unit\VillageAttributesTest" classname="Tests.Unit.VillageAttributesTest" assertions="3" time="0.005666"/>
        <testcase name="`Village Static Methods` → it can search by name static method" file="tests/Unit/VillageAttributesTest.php::`Village Static Methods` → it can search by name static method" class="Tests\Unit\VillageAttributesTest" classname="Tests.Unit.VillageAttributesTest" assertions="3" time="0.006504"/>
        <testcase name="`Village Static Methods` → it can get villages by district static method" file="tests/Unit/VillageAttributesTest.php::`Village Static Methods` → it can get villages by district static method" class="Tests\Unit\VillageAttributesTest" classname="Tests.Unit.VillageAttributesTest" assertions="3" time="0.005593"/>
        <testcase name="`Village Scopes` → it can scope search villages" file="tests/Unit/VillageAttributesTest.php::`Village Scopes` → it can scope search villages" class="Tests\Unit\VillageAttributesTest" classname="Tests.Unit.VillageAttributesTest" assertions="2" time="0.004481"/>
        <testcase name="`Village Scopes` → it can scope villages in district" file="tests/Unit/VillageAttributesTest.php::`Village Scopes` → it can scope villages in district" class="Tests\Unit\VillageAttributesTest" classname="Tests.Unit.VillageAttributesTest" assertions="1" time="0.004690"/>
        <testcase name="`Village Scopes` → it can scope villages in regency" file="tests/Unit/VillageAttributesTest.php::`Village Scopes` → it can scope villages in regency" class="Tests\Unit\VillageAttributesTest" classname="Tests.Unit.VillageAttributesTest" assertions="1" time="0.005266"/>
        <testcase name="`Village Scopes` → it can scope villages in province" file="tests/Unit/VillageAttributesTest.php::`Village Scopes` → it can scope villages in province" class="Tests\Unit\VillageAttributesTest" classname="Tests.Unit.VillageAttributesTest" assertions="1" time="0.005461"/>
        <testcase name="`Village Relationships` → it has regency through district relationship" file="tests/Unit/VillageAttributesTest.php::`Village Relationships` → it has regency through district relationship" class="Tests\Unit\VillageAttributesTest" classname="Tests.Unit.VillageAttributesTest" assertions="2" time="0.005036"/>
        <testcase name="`Village Relationships` → it gets province method" file="tests/Unit/VillageAttributesTest.php::`Village Relationships` → it gets province method" class="Tests\Unit\VillageAttributesTest" classname="Tests.Unit.VillageAttributesTest" assertions="2" time="0.004656"/>
      </testsuite>
    </testsuite>
  </testsuite>
</testsuites>
